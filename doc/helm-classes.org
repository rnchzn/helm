#+title: The Helm Classes Manual
# #+subtitle:  Release {{{version}}}
#+subtitle:  Release 3.6.2
#+author:    The Helm Classes Developers
# #+date:      {{{modification-time}}}
#+language:  en

# #+texinfo: @insertcopying

#+texinfo: @defindex hc

* Table Of Contents                                                     :TOC_4:
- [[#class-helm-source][class: helm-source]]
  - [[#init][init]]
  - [[#name][name]]
  - [[#action][action]]
  - [[#action-transformer][action-transformer]]
  - [[#after-init-hook][after-init-hook]]
  - [[#allow-dups][allow-dups]]
  - [[#before-init-hook][before-init-hook]]
  - [[#candidate-number-limit][candidate-number-limit]]
  - [[#candidate-transformer][candidate-transformer]]
  - [[#candidates][candidates]]
  - [[#cleanup][cleanup]]
  - [[#coerce][coerce]]
  - [[#delayed][delayed]]
  - [[#display-to-real][display-to-real]]
  - [[#filter-one-by-one][filter-one-by-one]]
  - [[#filtered-candidate-transformer][filtered-candidate-transformer]]
  - [[#follow][follow]]
  - [[#follow-delay][follow-delay]]
  - [[#fuzzy-match][fuzzy-match]]
  - [[#group][group]]
  - [[#header-line][header-line]]
  - [[#header-name][header-name]]
  - [[#help-message][help-message]]
  - [[#history][history]]
  - [[#keymap][keymap]]
  - [[#marked-with-props][marked-with-props]]
  - [[#match][match]]
  - [[#match-on-real][match-on-real]]
  - [[#match-part][match-part]]
  - [[#mode-line][mode-line]]
  - [[#multiline][multiline]]
  - [[#multimatch][multimatch]]
  - [[#must-match][must-match]]
  - [[#nohighlight][nohighlight]]
  - [[#nomark][nomark]]
  - [[#pattern-transformer][pattern-transformer]]
  - [[#persistent-action][persistent-action]]
  - [[#persistent-action-if][persistent-action-if]]
  - [[#persistent-help][persistent-help]]
  - [[#real-to-display][real-to-display]]
  - [[#redisplay][redisplay]]
  - [[#requires-pattern][requires-pattern]]
  - [[#resume][resume]]
  - [[#update][update]]
  - [[#volatile][volatile]]
  - [[#specialized-methods][Specialized Methods:]]
- [[#class-helm-source-sync][class: helm-source-sync]]
  - [[#candidates-1][candidates]]
  - [[#match-dynamic][match-dynamic]]
  - [[#match-strict][match-strict]]
  - [[#migemo][migemo]]
  - [[#specialized-methods-1][Specialized Methods:]]
- [[#class-helm-source-async][class: helm-source-async]]
  - [[#candidates-process][candidates-process]]
  - [[#multimatch-1][multimatch]]
  - [[#specialized-methods-2][Specialized Methods:]]
- [[#class-helm-source-in-buffer][class: helm-source-in-buffer]]
  - [[#init-1][init]]
  - [[#candidates-2][candidates]]
  - [[#data][data]]
  - [[#get-line][get-line]]
  - [[#match-1][match]]
  - [[#migemo-1][migemo]]
  - [[#search][search]]
  - [[#search-strict][search-strict]]
  - [[#volatile-1][volatile]]
  - [[#specialized-methods-3][Specialized Methods:]]
- [[#class-helm-source-dummy][class: helm-source-dummy]]
  - [[#accept-empty][accept-empty]]
  - [[#candidates-3][candidates]]
  - [[#filtered-candidate-transformer-1][filtered-candidate-transformer]]
  - [[#match-2][match]]
  - [[#multimatch-2][multimatch]]
  - [[#volatile-2][volatile]]
  - [[#specialized-methods-4][Specialized Methods:]]
- [[#class-helm-source-in-file][class: helm-source-in-file]]
  - [[#init-2][init]]
  - [[#candidates-file][candidates-file]]
  - [[#get-line-1][get-line]]
  - [[#specialized-methods-5][Specialized Methods:]]
- [[#class-helm-type-file][class: helm-type-file]]
  - [[#specialized-methods-6][Specialized Methods:]]
- [[#class-helm-type-bookmark][class: helm-type-bookmark]]
  - [[#specialized-methods-7][Specialized Methods:]]
- [[#class-helm-type-buffer][class: helm-type-buffer]]
  - [[#specialized-methods-8][Specialized Methods:]]
- [[#class-helm-type-function][class: helm-type-function]]
  - [[#specialized-methods-9][Specialized Methods:]]
- [[#class-helm-type-command][class: helm-type-command]]
  - [[#specialized-methods-10][Specialized Methods:]]
- [[#class-helm-type-timers][class: helm-type-timers]]
  - [[#specialized-methods-11][Specialized Methods:]]
- [[#class-helm-files-dired-source][class: helm-files-dired-source]]
  - [[#candidates-4][candidates]]
  - [[#match-dynamic-1][match-dynamic]]
  - [[#match-strict-1][match-strict]]
  - [[#migemo-2][migemo]]
  - [[#specialized-methods-12][Specialized Methods:]]
- [[#class-helm-source-session-class][class: helm-source-session-class]]
  - [[#action-1][action]]
  - [[#candidates-5][candidates]]
  - [[#help-message-1][help-message]]
  - [[#keymap-1][keymap]]
  - [[#specialized-methods-13][Specialized Methods:]]
- [[#class-helm-mac-spotlight-source][class: helm-mac-spotlight-source]]
  - [[#candidates-process-1][candidates-process]]
  - [[#multimatch-3][multimatch]]
  - [[#requires-pattern-1][requires-pattern]]
  - [[#specialized-methods-14][Specialized Methods:]]
- [[#class-helm-source-basic-bookmarks][class: helm-source-basic-bookmarks]]
  - [[#init-3][init]]
  - [[#candidates-6][candidates]]
  - [[#data-1][data]]
  - [[#filtered-candidate-transformer-2][filtered-candidate-transformer]]
  - [[#get-line-2][get-line]]
  - [[#match-3][match]]
  - [[#migemo-3][migemo]]
  - [[#search-1][search]]
  - [[#search-strict-1][search-strict]]
  - [[#volatile-3][volatile]]
  - [[#specialized-methods-15][Specialized Methods:]]
- [[#class-helm-source-filtered-bookmarks][class: helm-source-filtered-bookmarks]]
  - [[#init-4][init]]
  - [[#candidates-7][candidates]]
  - [[#data-2][data]]
  - [[#filtered-candidate-transformer-3][filtered-candidate-transformer]]
  - [[#get-line-3][get-line]]
  - [[#match-4][match]]
  - [[#migemo-4][migemo]]
  - [[#search-2][search]]
  - [[#search-strict-2][search-strict]]
  - [[#volatile-4][volatile]]
  - [[#specialized-methods-16][Specialized Methods:]]
- [[#class-helm-bookmark-override-inheritor][class: helm-bookmark-override-inheritor]]
  - [[#specialized-methods-17][Specialized Methods:]]
- [[#class-helm-bookmark-find-files-class][class: helm-bookmark-find-files-class]]
  - [[#init-5][init]]
  - [[#candidates-8][candidates]]
  - [[#data-3][data]]
  - [[#filtered-candidate-transformer-4][filtered-candidate-transformer]]
  - [[#get-line-4][get-line]]
  - [[#match-5][match]]
  - [[#migemo-5][migemo]]
  - [[#search-3][search]]
  - [[#search-strict-3][search-strict]]
  - [[#volatile-5][volatile]]
  - [[#specialized-methods-18][Specialized Methods:]]
- [[#class-helm-source-buffers][class: helm-source-buffers]]
  - [[#init-6][init]]
  - [[#buffer-list][buffer-list]]
  - [[#candidates-9][candidates]]
  - [[#help-message-2][help-message]]
  - [[#keymap-2][keymap]]
  - [[#match-6][match]]
  - [[#match-dynamic-2][match-dynamic]]
  - [[#match-strict-2][match-strict]]
  - [[#migemo-6][migemo]]
  - [[#multimatch-4][multimatch]]
  - [[#nohighlight-1][nohighlight]]
  - [[#persistent-action-1][persistent-action]]
  - [[#resume-1][resume]]
  - [[#volatile-6][volatile]]
  - [[#specialized-methods-19][Specialized Methods:]]
- [[#class-helm-m-x-class][class: helm-M-x-class]]
  - [[#candidates-10][candidates]]
  - [[#filtered-candidate-transformer-5][filtered-candidate-transformer]]
  - [[#help-message-3][help-message]]
  - [[#keymap-3][keymap]]
  - [[#match-dynamic-3][match-dynamic]]
  - [[#match-strict-3][match-strict]]
  - [[#migemo-7][migemo]]
  - [[#must-match-1][must-match]]
  - [[#nomark-1][nomark]]
  - [[#persistent-help-1][persistent-help]]
  - [[#specialized-methods-20][Specialized Methods:]]
- [[#class-helm-absolute-time-timers-class][class: helm-absolute-time-timers-class]]
  - [[#allow-dups-1][allow-dups]]
  - [[#candidate-transformer-1][candidate-transformer]]
  - [[#candidates-11][candidates]]
  - [[#match-dynamic-4][match-dynamic]]
  - [[#match-strict-4][match-strict]]
  - [[#migemo-8][migemo]]
  - [[#specialized-methods-21][Specialized Methods:]]
- [[#class-helm-idle-time-timers-class][class: helm-idle-time-timers-class]]
  - [[#allow-dups-2][allow-dups]]
  - [[#candidate-transformer-2][candidate-transformer]]
  - [[#candidates-12][candidates]]
  - [[#match-dynamic-5][match-dynamic]]
  - [[#match-strict-5][match-strict]]
  - [[#migemo-9][migemo]]
  - [[#specialized-methods-22][Specialized Methods:]]
- [[#class-helm-list-el-package-source][class: helm-list-el-package-source]]
  - [[#init-7][init]]
  - [[#action-2][action]]
  - [[#action-transformer-1][action-transformer]]
  - [[#candidate-number-limit-1][candidate-number-limit]]
  - [[#filtered-candidate-transformer-6][filtered-candidate-transformer]]
  - [[#get-line-5][get-line]]
  - [[#group-1][group]]
  - [[#help-message-4][help-message]]
  - [[#keymap-4][keymap]]
  - [[#update-1][update]]
  - [[#specialized-methods-23][Specialized Methods:]]
- [[#class-helm-epa][class: helm-epa]]
  - [[#init-8][init]]
  - [[#candidates-13][candidates]]
  - [[#keymap-5][keymap]]
  - [[#mode-line-1][mode-line]]
  - [[#specialized-methods-24][Specialized Methods:]]
- [[#class-helm-esh-source][class: helm-esh-source]]
  - [[#init-9][init]]
  - [[#action-3][action]]
  - [[#candidates-14][candidates]]
  - [[#filtered-candidate-transformer-7][filtered-candidate-transformer]]
  - [[#nohighlight-2][nohighlight]]
  - [[#persistent-action-2][persistent-action]]
  - [[#specialized-methods-25][Specialized Methods:]]
- [[#class-helm-eshell-history-source][class: helm-eshell-history-source]]
  - [[#init-10][init]]
  - [[#action-4][action]]
  - [[#candidate-number-limit-2][candidate-number-limit]]
  - [[#candidates-15][candidates]]
  - [[#keymap-6][keymap]]
  - [[#multiline-1][multiline]]
  - [[#nomark-2][nomark]]
  - [[#specialized-methods-26][Specialized Methods:]]
- [[#class-helm-fd-class][class: helm-fd-class]]
  - [[#action-5][action]]
  - [[#candidate-number-limit-3][candidate-number-limit]]
  - [[#candidates-process-2][candidates-process]]
  - [[#filtered-candidate-transformer-8][filtered-candidate-transformer]]
  - [[#help-message-5][help-message]]
  - [[#keymap-7][keymap]]
  - [[#nohighlight-3][nohighlight]]
  - [[#requires-pattern-2][requires-pattern]]
  - [[#specialized-methods-27][Specialized Methods:]]
- [[#class-helm-source-ffiles][class: helm-source-ffiles]]
  - [[#init-11][init]]
  - [[#action-6][action]]
  - [[#action-transformer-2][action-transformer]]
  - [[#after-init-hook-1][after-init-hook]]
  - [[#before-init-hook-1][before-init-hook]]
  - [[#candidate-number-limit-4][candidate-number-limit]]
  - [[#candidates-16][candidates]]
  - [[#cleanup-1][cleanup]]
  - [[#filtered-candidate-transformer-9][filtered-candidate-transformer]]
  - [[#group-2][group]]
  - [[#header-name-1][header-name]]
  - [[#help-message-6][help-message]]
  - [[#keymap-8][keymap]]
  - [[#match-on-real-1][match-on-real]]
  - [[#migemo-10][migemo]]
  - [[#mode-line-2][mode-line]]
  - [[#nohighlight-4][nohighlight]]
  - [[#persistent-action-if-1][persistent-action-if]]
  - [[#persistent-help-2][persistent-help]]
  - [[#update-2][update]]
  - [[#volatile-7][volatile]]
  - [[#specialized-methods-28][Specialized Methods:]]
- [[#class-helm-browse-project-override-inheritor][class: helm-browse-project-override-inheritor]]
  - [[#specialized-methods-29][Specialized Methods:]]
- [[#class-helm-browse-project-source][class: helm-browse-project-source]]
  - [[#init-12][init]]
  - [[#candidates-17][candidates]]
  - [[#data-4][data]]
  - [[#filter-one-by-one-1][filter-one-by-one]]
  - [[#get-line-6][get-line]]
  - [[#match-7][match]]
  - [[#match-part-1][match-part]]
  - [[#migemo-11][migemo]]
  - [[#root-dir][root-dir]]
  - [[#search-4][search]]
  - [[#search-strict-4][search-strict]]
  - [[#volatile-8][volatile]]
  - [[#specialized-methods-30][Specialized Methods:]]
- [[#class-helm-file-cache][class: helm-file-cache]]
  - [[#init-13][init]]
  - [[#candidates-18][candidates]]
  - [[#data-5][data]]
  - [[#get-line-7][get-line]]
  - [[#match-8][match]]
  - [[#migemo-12][migemo]]
  - [[#search-5][search]]
  - [[#search-strict-5][search-strict]]
  - [[#volatile-9][volatile]]
  - [[#specialized-methods-31][Specialized Methods:]]
- [[#class-helm-recentf-source][class: helm-recentf-source]]
  - [[#init-14][init]]
  - [[#candidates-19][candidates]]
  - [[#match-dynamic-6][match-dynamic]]
  - [[#match-part-2][match-part]]
  - [[#match-strict-6][match-strict]]
  - [[#migemo-13][migemo]]
  - [[#pattern-transformer-1][pattern-transformer]]
  - [[#persistent-action-3][persistent-action]]
  - [[#specialized-methods-32][Specialized Methods:]]
- [[#class-helm-files-in-current-dir-source][class: helm-files-in-current-dir-source]]
  - [[#candidates-20][candidates]]
  - [[#fuzzy-match-1][fuzzy-match]]
  - [[#match-dynamic-7][match-dynamic]]
  - [[#match-part-3][match-part]]
  - [[#match-strict-7][match-strict]]
  - [[#migemo-14][migemo]]
  - [[#pattern-transformer-2][pattern-transformer]]
  - [[#specialized-methods-33][Specialized Methods:]]
- [[#class-helm-grep-class][class: helm-grep-class]]
  - [[#action-7][action]]
  - [[#after-init-hook-2][after-init-hook]]
  - [[#backend][backend]]
  - [[#before-init-hook-2][before-init-hook]]
  - [[#candidate-number-limit-5][candidate-number-limit]]
  - [[#candidates-process-3][candidates-process]]
  - [[#filtered-candidate-transformer-10][filtered-candidate-transformer]]
  - [[#group-3][group]]
  - [[#help-message-7][help-message]]
  - [[#history-1][history]]
  - [[#keymap-9][keymap]]
  - [[#nohighlight-5][nohighlight]]
  - [[#nomark-3][nomark]]
  - [[#pcre][pcre]]
  - [[#persistent-action-4][persistent-action]]
  - [[#persistent-help-3][persistent-help]]
  - [[#requires-pattern-3][requires-pattern]]
  - [[#specialized-methods-34][Specialized Methods:]]
- [[#class-helm-grep-ag-class][class: helm-grep-ag-class]]
  - [[#action-8][action]]
  - [[#candidate-number-limit-6][candidate-number-limit]]
  - [[#filtered-candidate-transformer-11][filtered-candidate-transformer]]
  - [[#group-4][group]]
  - [[#help-message-8][help-message]]
  - [[#history-2][history]]
  - [[#keymap-10][keymap]]
  - [[#nohighlight-6][nohighlight]]
  - [[#nomark-4][nomark]]
  - [[#pcre-1][pcre]]
  - [[#persistent-action-5][persistent-action]]
  - [[#persistent-help-4][persistent-help]]
  - [[#requires-pattern-4][requires-pattern]]
  - [[#specialized-methods-35][Specialized Methods:]]
- [[#class-helm-gid-source][class: helm-gid-source]]
  - [[#action-9][action]]
  - [[#candidate-number-limit-7][candidate-number-limit]]
  - [[#candidates-process-4][candidates-process]]
  - [[#db-dir][db-dir]]
  - [[#filtered-candidate-transformer-12][filtered-candidate-transformer]]
  - [[#header-name-2][header-name]]
  - [[#help-message-9][help-message]]
  - [[#history-3][history]]
  - [[#nohighlight-7][nohighlight]]
  - [[#persistent-action-6][persistent-action]]
  - [[#requires-pattern-5][requires-pattern]]
  - [[#specialized-methods-36][Specialized Methods:]]
- [[#class-helm-imenu-source][class: helm-imenu-source]]
  - [[#action-10][action]]
  - [[#candidate-transformer-3][candidate-transformer]]
  - [[#candidates-21][candidates]]
  - [[#group-5][group]]
  - [[#help-message-10][help-message]]
  - [[#keymap-11][keymap]]
  - [[#nomark-5][nomark]]
  - [[#persistent-action-7][persistent-action]]
  - [[#persistent-help-5][persistent-help]]
  - [[#specialized-methods-37][Specialized Methods:]]
- [[#class-helm-info-source][class: helm-info-source]]
  - [[#init-15][init]]
  - [[#action-11][action]]
  - [[#display-to-real-1][display-to-real]]
  - [[#get-line-8][get-line]]
  - [[#info-file][info-file]]
  - [[#specialized-methods-38][Specialized Methods:]]
- [[#class-helm-locate-override-inheritor][class: helm-locate-override-inheritor]]
  - [[#specialized-methods-39][Specialized Methods:]]
- [[#class-helm-locate-source][class: helm-locate-source]]
  - [[#init-16][init]]
  - [[#candidate-number-limit-8][candidate-number-limit]]
  - [[#candidates-process-5][candidates-process]]
  - [[#group-6][group]]
  - [[#history-4][history]]
  - [[#multimatch-5][multimatch]]
  - [[#persistent-action-8][persistent-action]]
  - [[#redisplay-1][redisplay]]
  - [[#requires-pattern-6][requires-pattern]]
  - [[#specialized-methods-40][Specialized Methods:]]
- [[#class-helm-locate-subdirs-source][class: helm-locate-subdirs-source]]
  - [[#basedir][basedir]]
  - [[#data-6][data]]
  - [[#group-7][group]]
  - [[#subdir][subdir]]
  - [[#specialized-methods-41][Specialized Methods:]]
- [[#class-helm-moccur-class][class: helm-moccur-class]]
  - [[#buffer-name][buffer-name]]
  - [[#moccur-buffers][moccur-buffers]]
  - [[#specialized-methods-42][Specialized Methods:]]
- [[#class-helm-semantic-source][class: helm-semantic-source]]
  - [[#init-17][init]]
  - [[#action-12][action]]
  - [[#get-line-9][get-line]]
  - [[#help-message-11][help-message]]
  - [[#keymap-12][keymap]]
  - [[#persistent-action-9][persistent-action]]
  - [[#persistent-help-6][persistent-help]]
  - [[#specialized-methods-43][Specialized Methods:]]
- [[#main-index][Main Index]]
- [[#key-index][Key Index]]
- [[#command-and-function-index][Command and Function Index]]
- [[#variable-index][Variable Index]]
- [[#footnotes][Footnotes]]
- [[#class-index][Class Index]]

* class: helm-source

#+hcindex: helm-source

#+hcindex: helm-bookmark-override-inheritor

#+hcindex: helm-type-timers

#+hcindex: helm-type-command

#+hcindex: helm-type-function

#+hcindex: helm-type-buffer

#+hcindex: helm-type-bookmark

#+hcindex: helm-type-file

#+hcindex: helm-source-dummy

#+hcindex: helm-source-in-buffer

#+hcindex: helm-source-async

#+hcindex: helm-source-sync

- *parents* ::

- *children* ::

  - [[*class: helm-bookmark-override-inheritor]]

  - [[*class: helm-type-timers]]

  - [[*class: helm-type-command]]

  - [[*class: helm-type-function]]

  - [[*class: helm-type-buffer]]

  - [[*class: helm-type-bookmark]]

  - [[*class: helm-type-file]]

  - [[*class: helm-source-dummy]]

  - [[*class: helm-source-in-buffer]]

  - [[*class: helm-source-async]]

  - [[*class: helm-source-sync]]

This class has following slots

** init
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Function called with no parameters when helm is started.
    It is useful for collecting current state information which can be
    used to create the list of candidates later.
    Initialization of ~candidates-in-buffer~ is done here
    with ~helm-init-candidates-in-buffer~.

** name
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    The name of the source.
    A string which is also the heading which appears
    above the list of matches from the source. Must be unique.

** action
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'identity

- :documentation

    An alist of (DISPLAY . FUNCTION) pairs, a variable name  or a function.
    FUNCTION is called with one parameter: the selected candidate.

    An action other than the default can be chosen from this list
    of actions for the currently selected candidate (by default
    with TAB). The DISPLAY string is shown in the completions
    buffer and the FUNCTION is invoked when an action is
    selected. The first action of the list is the default.

    You should use ~helm-make-actions~ to build this alist easily.

** action-transformer
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    It's a function or a list of functions called with two
    arguments when the action list from the source is
    assembled. The first argument is the list of actions, the
    second is the current selection.  If it is a list of functions,
    it calls each function sequentially.

    The function should return a transformed action list.

    This can be used to customize the list of actions based on the
    currently selected candidate.

** after-init-hook
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    A local hook that run at end of initilization of this source.
    i.e After the creation of ~helm-buffer~.

    Should be a variable.
    Can be also an anonymous function or a list of functions
    directly added to slot, this is not recommended though.

** allow-dups
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Allow helm collecting duplicates candidates.

** before-init-hook
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    A local hook that run at beginning of initilization of this source.
    i.e Before the creation of ~helm-buffer~.

    Should be a variable (defined with defvar).
    Can be also an anonymous function or a list of functions
    directly added to slot, this is not recommended though.

** candidate-number-limit
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Override ~helm-candidate-number-limit~ only for this source.

** candidate-transformer
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    It's a function or a list of functions called with one argument
    when the completion list from the source is built. The argument
    is the list of candidates retrieved from the source. The
    function should return a transformed list of candidates which
    will be used for the actual completion.  If it is a list of
    functions, it calls each function sequentially.

    This can be used to transform or remove items from the list of
    candidates.

    Note that ~candidates~ is run already, so the given transformer
    function should also be able to handle candidates with (DISPLAY
    . REAL) format.

** candidates
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Specifies how to retrieve candidates from the source.
    It can either be a variable name, a function called with no parameters
    or the actual list of candidates.

    Do NOT use this for asynchronous sources, use ~candidates-process~
    instead.

    The list must be a list whose members are strings, symbols
    or (DISPLAY . REAL) pairs.

    In case of (DISPLAY . REAL) pairs, the DISPLAY string is shown
    in the Helm buffer, but the REAL one is used as action
    argument when the candidate is selected. This allows a more
    readable presentation for candidates which would otherwise be,
    for example, too long or have a common part shared with other
    candidates which can be safely replaced with an abbreviated
    string for display purposes.

    Note that if the (DISPLAY . REAL) form is used then pattern
    matching is done on the displayed string, not on the real
    value.

    This function, generally should not compute candidates according to
    ~helm-pattern~ which defeat all the Helm's matching mechanism
    i.e. multiple pattern matching and/or fuzzy matching.
    If you want to do so, use :match-dynamic slot to be sure matching
    occur only in :candidates function and there is no conflict with
    other match functions.

** cleanup
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Function called with no parameters when *helm* buffer is
    closed. It is useful for killing unneeded candidates buffer.

    Note that the function is executed BEFORE performing action.

** coerce
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    It's a function called with one argument: the selected candidate.
    This function is intended for type convertion. In normal case,
    the selected candidate (string) is passed to action
    function. If coerce function is specified, it is called just
    before action function.

    Example: converting string to symbol
      (coerce . intern)

** delayed
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    This slot have no more effect and is just kept for backward compatibility.
    Please don't use it.

** display-to-real
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Transform the selected candidate when passing it to action.

    Function called with one parameter, the selected candidate.

    Avoid recomputing all candidates with candidate-transformer
    or filtered-candidate-transformer to give a new value to REAL,
    instead the selected candidate is transformed only when passing it
    to action.
    Example:

      (helm :sources (helm-build-sync-source "test"
		   :candidates '(a b c d e)
		   :display-to-real (lambda (c) (concat c ":modified by d-t-r")))
	:buffer "*helm test*")

    Note that this is NOT a transformer,
    so the display will not be modified by this function.

** filter-one-by-one
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    A transformer function that treat candidates one by one.
    It is called with one arg the candidate.
    It is faster than ~filtered-candidate-transformer~ or
    ~candidate-transformer~, but should be used only in sources
    that recompute constantly their candidates, e.g ~helm-source-find-files~.
    Filtering happen early and candidates are treated
    one by one instead of re-looping on the whole list.
    If used with ~filtered-candidate-transformer~ or ~candidate-transformer~
    these functions should treat the candidates transformed by the
    ~filter-one-by-one~ function in consequence.

** filtered-candidate-transformer
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    It has the same format as ~candidate-transformer~, except the
    function is called with two parameters: the candidate list and
    the source.

    This transformer is run on the candidate list which is already
    filtered by the current pattern. While ~candidate-transformer~
    is run only once, it is run every time the input pattern is
    changed.

    It can be used to transform the candidate list dynamically, for
    example, based on the current pattern.

    In some cases it may also be more efficent to perform candidate
    transformation here, instead of with ~candidate-transformer~
    even if this transformation is done every time the pattern is
    changed.  For example, if a candidate set is very large then
    ~candidate-transformer~ transforms every candidate while only
    some of them will actually be displayed due to the limit
    imposed by ~helm-candidate-number-limit~.

    Note that ~candidates~ and ~candidate-transformer~ is run
    already, so the given transformer function should also be able
    to handle candidates with (DISPLAY . REAL) format.

** follow
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Enable ~helm-follow-mode~ for this source only.
    With a value of 1 enable, a value of -1 or nil disable the mode.
    See ~helm-follow-mode~ for more infos.

** follow-delay
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    ~helm-follow-mode~ will execute persistent-action after this delay.
    Otherwise value of ~helm-follow-input-idle-delay~ is used if non--nil,
    If none of these are found fallback to ~helm-input-idle-delay~.

** fuzzy-match
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Enable fuzzy matching in this source.
    This will overwrite settings in MATCH slot, and for
    sources built with child class ~helm-source-in-buffer~ the SEARCH slot.
    This is an easy way of enabling fuzzy matching, but you can use the MATCH
    or SEARCH slots yourself if you want something more elaborated, mixing
    different type of match (See ~helm-source-buffers~ class for example).

    This attribute is not supported for asynchronous sources
    since they perform pattern matching themselves.

** group
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  helm

- :documentation

    The current source group, default to ~helm~ when not specified.

** header-line
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Source local ~header-line-format~.
    It will be displayed in ~header-line~ or in ~minibuffer~ depending
    of value of ~helm-echo-input-in-header-line~ and ~helm-display-header-line~.
    It accepts also variable/function name.

** header-name
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    A function returning the display string of the header.
    Its argument is the name of the source. This attribute is useful to
    add an additional information with the source name.
    It doesn't modify the name of the source.

** help-message
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Help message for this source.
    If not present, ~helm-help-message~ value will be used.

** history
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Allow passing history variable to helm from source.
    It should be a quoted symbol.
    Passing the history variable here have no effect
    so add it also in the ~helm~ call with the :history keyword.
    The main point of adding the variable here
    is to make it available when resuming.

** keymap
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  helm-map

- :documentation

    Specific keymap for this source.
    default value is ~helm-map~.

** marked-with-props
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Get candidates with their properties in ~helm-marked-candidates~.
    Allow using the FORCE-DISPLAY-PART of ~helm-get-selection~ in marked
    candidates, use t or 'withprop to pass it to ~helm-get-selection~.

** match
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    List of functions called with one parameter: a candidate. The
    function should return non-nil if the candidate matches the
    current pattern (see variable ~helm-pattern~).

    When using ~candidates-in-buffer~ its default value is ~identity~ and
    don't have to be changed, use the ~search~ slot instead.

    This attribute allows the source to override the default
    pattern matching based on ~string-match~. It can be used, for
    example, to implement a source for file names and do the
    pattern matching on the basename of files, since it's more
    likely one is typing part of the basename when searching for a
    file, instead of some string anywhere else in its path.

    If the list contains more than one function then the list of
    matching candidates from the source is constructed by appending
    the results after invoking the first function on all the
    potential candidates, then the next function, and so on. The
    matching candidates supplied by the first function appear first
    in the list of results and then results from the other
    functions, respectively.

    This attribute has no effect for asynchronous sources (see
    attribute ~candidates~), and sources using ~match-dynamic~
    since they perform pattern matching themselves.

    Note that FUZZY-MATCH slot will overhide value of this slot.

** match-on-real
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Match the real value of candidates when non nil.

** match-part
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Allow matching only one part of candidate.
    If source contain match-part attribute, match is computed only
    on part of candidate returned by the call of function provided
    by this attribute. The function should have one arg, candidate,
    and return only a specific part of candidate.
    On async sources, as matching is done by the backend, this have
    no effect apart for highlighting matches.

** mode-line
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Source local ~helm-mode-line-string~ (included in
    ~mode-line-format~). It accepts also variable/function name.

** multiline
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Allow multiline candidates.
    When non-nil candidates will be separated by ~helm-candidate-separator~.
    You can customize the color of this separator with ~helm-separator~ face.
    Value of multiline can be an integer which specify the maximum size of the
    multiline string to display, if multiline string is longer than this value
    it will be truncated.

** multimatch
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  t

- :documentation

    Use the multi-match algorithm when non-nil.
    I.e Allow specifying multiple patterns separated by spaces.
    When a pattern is prefixed by "!" the negation of this pattern is used,
    i.e match anything but this pattern.
    It is the standard way of matching in helm and is enabled by default.
    It can be used with fuzzy-matching enabled, but as soon helm detect a space,
    each pattern will match by regexp and will not be fuzzy.

** must-match
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Same as ~completing-read~ require-match arg.
    Possible values are:
    - ~t~ which prevent exiting with an empty helm-buffer i.e. no matches.
    - ~confirm~ which ask for confirmation i.e. need to press a second
       time RET.
    - ~nil~ is the default and is doing nothing i.e. returns nil when
      pressing RET with an empty helm-buffer.
    - Any other non nil values e.g. ~ignore~ allow exiting with
      minibuffer contents as candidate value (in this case helm-buffer
      is empty).

** nohighlight
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Disable highlighting matches in this source.
    This will disable generic highlighting of matches,
    but some specialized highlighting can be done from elsewhere,
    i.e from ~filtered-candidate-transformer~ or ~filter-one-by-one~ slots.
    So use this to either disable completely highlighting in your source,
    or to disable highlighting and use a specialized highlighting matches
    function for this source.
    Remember that this function should run AFTER all filter functions if those
    filter functions are modifying face properties, though it is possible to
    avoid this by using new ~add-face-text-property~ in your filter functions.

** nomark
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Don't allow marking candidates when this attribute is present.

** pattern-transformer
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    It's a function or a list of functions called with one argument
    before computing matches. Its argument is ~helm-pattern~.
    Functions should return transformed ~helm-pattern~.

    It is useful to change interpretation of ~helm-pattern~.

** persistent-action
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Can be a either a Function called with one parameter (the
    selected candidate) or a cons cell where first element is this
    same function and second element a symbol (e.g never-split)
    that inform ~helm-execute-persistent-action~ to not split his
    window to execute this persistent action.
    Example:

      (defun foo-persistent-action (candidate)
	 (do-something candidate))

      :persistent-action '(foo-persistent-action . never-split) ; Don't split
    or
      :persistent-action 'foo-persistent-action ; Split

    When specifying :persistent-action by slot directly, foo-persistent-action
    will be executed without quitting helm when hitting ~C-j~.

    Note that other persistent actions can be defined using other
    bindings than ~C-j~ by simply defining an interactive function bound
    to a key in the keymap source.
    The function should create a new attribute in source before calling
    ~helm-execute-persistent-action~ on this attribute.
    Example:

       (defun helm-ff-persistent-delete ()
	 "Delete current candidate without quitting."
	 (interactive)
	 (with-helm-alive-p
	   (helm-set-attr 'quick-delete '(helm-ff-quick-delete . never-split))
	   (helm-execute-persistent-action 'quick-delete)))

    This function is then bound in ~helm-find-files-map~.

** persistent-action-if
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Similar from persistent action but it is a function that should
    return an object suitable for persistent action when called , i.e. a
    function or a cons cell.
    Example:

       (defun foo-persistent-action (candidate)
	 (cond (something
		;; Don't split helm-window.
		(cons (lambda (_ignore)
			(do-something candidate))
		      'no-split))
	       ;; Split helm-window.
	       (something-else
		(lambda (_ignore)
		  (do-something-else candidate)))))

       :persistent-action-if 'foo-persistent-action

    Here when hitting ~C-j~ one of the lambda's will be executed
    depending on something or something-else condition, splitting or not
    splitting as needed.
    See ~helm-find-files-persistent-action-if~ definition as another example.

** persistent-help
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    A string to explain persistent-action of this source. It also
    accepts a function or a variable name.
    It will be displayed in ~header-line~ or in ~minibuffer~ depending
    of value of ~helm-echo-input-in-header-line~ and ~helm-display-header-line~.

** real-to-display
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Recompute all candidates computed previously with other transformers.

    Function called with one parameter, the selected candidate.

    The real value of candidates will be shown in display and of course
    be used by action.
    Example:

      (helm :sources (helm-build-sync-source "test"
		   :candidates '(("foo" . 1) ("bar" . 2) ("baz". 3))
		   :real-to-display (lambda (c) (format "%s" (1+ c))))
	:buffer "*helm test*")

    Mostly deprecated, kept only for backward compatibility.

** redisplay
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'identity

- :documentation

    A function or a list of functions to apply to current list
    of candidates when redisplaying buffer with ~helm-redisplay-buffer~.
    This is only interesting for modifying and redisplaying the whole list
    of candidates in async sources.
    It uses ~identity~ by default for when async sources are mixed with
    normal sources, in this case these normal sources are not modified and
    redisplayed as they are.

** requires-pattern
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  0

- :documentation

    If present matches from the source are shown only if the
    pattern is not empty. Optionally, it can have an integer
    parameter specifying the required length of input which is
    useful in case of sources with lots of candidates.

** resume
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Function called with no parameters at end of initialization
    when ~helm-resume~ is started.
    If this function try to do something against ~helm-buffer~, (e.g updating,
    searching etc...) probably you should run it in a timer to ensure
    ~helm-buffer~ is ready.

** update
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Function called with no parameters at before "init" function
    when ~helm-force-update~ is called.

** volatile
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Indicates the source assembles the candidate list dynamically,
    so it shouldn't be cached within a single Helm
    invocation. It is only applicable to synchronous sources,
    because asynchronous sources are not cached.

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-source-sync

#+hcindex: helm-source-sync

#+hcindex: helm-source

#+hcindex: helm-imenu-source

#+hcindex: helm-eshell-history-source

#+hcindex: helm-esh-source

#+hcindex: helm-epa

#+hcindex: helm-source-session-class

#+hcindex: helm-files-dired-source

#+hcindex: helm-files-in-current-dir-source

#+hcindex: helm-recentf-source

#+hcindex: helm-M-x-class

#+hcindex: helm-idle-time-timers-class

#+hcindex: helm-absolute-time-timers-class

#+hcindex: helm-source-ffiles

#+hcindex: helm-source-buffers

- *parents* ::

  - [[*class: helm-source]]

- *children* ::

  - [[*class: helm-imenu-source]]

  - [[*class: helm-eshell-history-source]]

  - [[*class: helm-esh-source]]

  - [[*class: helm-epa]]

  - [[*class: helm-source-session-class]]

  - [[*class: helm-files-dired-source]]

  - [[*class: helm-files-in-current-dir-source]]

  - [[*class: helm-recentf-source]]

  - [[*class: helm-M-x-class]]

  - [[*class: helm-idle-time-timers-class]]

  - [[*class: helm-absolute-time-timers-class]]

  - [[*class: helm-source-ffiles]]

  - [[*class: helm-source-buffers]]

This class has following slots

** candidates
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  '("ERROR: You must specify the ~candidates~ slot, either with a list or a function")

- :documentation

    Specifies how to retrieve candidates from the source.
    It can either be a variable name, a function called with no parameters
    or the actual list of candidates.

    Do NOT use this for asynchronous sources, use ~candidates-process~
    instead.

    The list must be a list whose members are strings, symbols
    or (DISPLAY . REAL) pairs.

    In case of (DISPLAY . REAL) pairs, the DISPLAY string is shown
    in the Helm buffer, but the REAL one is used as action
    argument when the candidate is selected. This allows a more
    readable presentation for candidates which would otherwise be,
    for example, too long or have a common part shared with other
    candidates which can be safely replaced with an abbreviated
    string for display purposes.

    Note that if the (DISPLAY . REAL) form is used then pattern
    matching is done on the displayed string, not on the real
    value.

    This function, generally should not compute candidates according to
    ~helm-pattern~ which defeat all the Helm's matching mechanism
    i.e. multiple pattern matching and/or fuzzy matching.
    If you want to do so, use :match-dynamic slot to be sure matching
    occur only in :candidates function and there is no conflict with
    other match functions.

** match-dynamic
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Disable all helm matching functions when non nil.
    The :candidates function in this case is in charge of fetching
    candidates dynamically according to ~helm-pattern~.
    Note that :volatile is automatically enabled when using this, so no
    need to specify it.

** match-strict
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    When specifying a match function within a source and
    helm-multi-match is enabled, the result of all matching
    functions will be concatened, which in some cases is not what
    is wanted. When using ~match-strict~ only this or these
    functions will be used. You can specify those functions as a
    list of functions or a single symbol function.

    NOTE: This have the same effect as using :MULTIMATCH nil.

** migemo
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Enable migemo.
    When multimatch is disabled, you can give the symbol 'nomultimatch as value
    to force not using generic migemo matching function.
    In this case you have to provide your own migemo matching funtion
    that kick in when ~helm-migemo-mode~ is enabled.
    Otherwise it will be available for this source once ~helm-migemo-mode~
    is enabled when non-nil.

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-source-sync))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-source-async

#+hcindex: helm-source-async

#+hcindex: helm-source

#+hcindex: helm-gid-source

#+hcindex: helm-fd-class

#+hcindex: helm-mac-spotlight-source

#+hcindex: helm-locate-source

#+hcindex: helm-grep-ag-class

#+hcindex: helm-grep-class

- *parents* ::

  - [[*class: helm-source]]

- *children* ::

  - [[*class: helm-gid-source]]

  - [[*class: helm-fd-class]]

  - [[*class: helm-mac-spotlight-source]]

  - [[*class: helm-locate-source]]

  - [[*class: helm-grep-ag-class]]

  - [[*class: helm-grep-class]]

This class has following slots

** candidates-process
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    This attribute is used to define a process as candidate.
    The function called with no arguments must return a process
    i.e. ~processp~, it use typically ~start-process~ or ~make-process~,
    see (info "(elisp) Asynchronous Processes").

    NOTE:
    When building the source at runtime you can give directly a process
    as value, otherwise wrap the process call into a function.
    The process buffer should be nil, otherwise, if you use
    ~helm-buffer~ give to the process a sentinel.

** multimatch
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Use the multi-match algorithm when non-nil.
    I.e Allow specifying multiple patterns separated by spaces.
    When a pattern is prefixed by "!" the negation of this pattern is used,
    i.e match anything but this pattern.
    It is the standard way of matching in helm and is enabled by default.
    It can be used with fuzzy-matching enabled, but as soon helm detect a space,
    each pattern will match by regexp and will not be fuzzy.

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-source-async))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-source-in-buffer

#+hcindex: helm-source-in-buffer

#+hcindex: helm-source

#+hcindex: helm-semantic-source

#+hcindex: helm-list-el-package-source

#+hcindex: helm-file-cache

#+hcindex: helm-source-filtered-bookmarks

#+hcindex: helm-source-basic-bookmarks

#+hcindex: helm-info-source

#+hcindex: helm-browse-project-source

#+hcindex: helm-moccur-class

#+hcindex: helm-locate-subdirs-source

#+hcindex: helm-source-in-file

- *parents* ::

  - [[*class: helm-source]]

- *children* ::

  - [[*class: helm-semantic-source]]

  - [[*class: helm-list-el-package-source]]

  - [[*class: helm-file-cache]]

  - [[*class: helm-source-filtered-bookmarks]]

  - [[*class: helm-source-basic-bookmarks]]

  - [[*class: helm-info-source]]

  - [[*class: helm-browse-project-source]]

  - [[*class: helm-moccur-class]]

  - [[*class: helm-locate-subdirs-source]]

  - [[*class: helm-source-in-file]]

This class has following slots

** init
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-default-init-source-in-buffer-function

- :documentation

    Function called with no parameters when helm is started.
    It is useful for collecting current state information which can be
    used to create the list of candidates later.
    Initialization of ~candidates-in-buffer~ is done here
    with ~helm-init-candidates-in-buffer~.

** candidates
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-candidates-in-buffer

- :documentation

    Specifies how to retrieve candidates from the source.
    It can either be a variable name, a function called with no parameters
    or the actual list of candidates.

    Do NOT use this for asynchronous sources, use ~candidates-process~
    instead.

    The list must be a list whose members are strings, symbols
    or (DISPLAY . REAL) pairs.

    In case of (DISPLAY . REAL) pairs, the DISPLAY string is shown
    in the Helm buffer, but the REAL one is used as action
    argument when the candidate is selected. This allows a more
    readable presentation for candidates which would otherwise be,
    for example, too long or have a common part shared with other
    candidates which can be safely replaced with an abbreviated
    string for display purposes.

    Note that if the (DISPLAY . REAL) form is used then pattern
    matching is done on the displayed string, not on the real
    value.

    This function, generally should not compute candidates according to
    ~helm-pattern~ which defeat all the Helm's matching mechanism
    i.e. multiple pattern matching and/or fuzzy matching.
    If you want to do so, use :match-dynamic slot to be sure matching
    occur only in :candidates function and there is no conflict with
    other match functions.

** data
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    A string, a list or a buffer that will be used to feed the ~helm-candidates-buffer~.
    This data will be passed in a function added to the init slot and
    the buffer will be build with ~helm-init-candidates-in-buffer~ or directly
    with ~helm-candidates-buffer~ if data is a buffer.
    This is an easy and fast method to build a ~candidates-in-buffer~ source.

** get-line
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'buffer-substring-no-properties

- :documentation

    A function like ~buffer-substring-no-properties~ or ~buffer-substring~.
    This function converts region from point at line-beginning and point
    at line-end in the ~helm-candidate-buffer~ to a string which will be displayed
    in the ~helm-buffer~, it takes two args BEG and END.
    By default, ~helm-candidates-in-buffer~ uses
    ~buffer-substring-no-properties~ which does no conversion and doesn't carry
    text properties.

** match
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  '(identity)

- :documentation

    List of functions called with one parameter: a candidate. The
    function should return non-nil if the candidate matches the
    current pattern (see variable ~helm-pattern~).

    When using ~candidates-in-buffer~ its default value is ~identity~ and
    don't have to be changed, use the ~search~ slot instead.

    This attribute allows the source to override the default
    pattern matching based on ~string-match~. It can be used, for
    example, to implement a source for file names and do the
    pattern matching on the basename of files, since it's more
    likely one is typing part of the basename when searching for a
    file, instead of some string anywhere else in its path.

    If the list contains more than one function then the list of
    matching candidates from the source is constructed by appending
    the results after invoking the first function on all the
    potential candidates, then the next function, and so on. The
    matching candidates supplied by the first function appear first
    in the list of results and then results from the other
    functions, respectively.

    This attribute has no effect for asynchronous sources (see
    attribute ~candidates~), and sources using ~match-dynamic~
    since they perform pattern matching themselves.

    Note that FUZZY-MATCH slot will overhide value of this slot.

** migemo
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Enable migemo.
    When multimatch is disabled, you can give the symbol 'nomultimatch as value
    to force not using generic migemo matching function.
    In this case you have to provide your own migemo matching funtion
    that kick in when ~helm-migemo-mode~ is enabled.
    Otherwise it will be available for this source once ~helm-migemo-mode~
    is enabled when non-nil.

** search
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  '(helm-candidates-in-buffer-search-default-fn)

- :documentation

    List of functions like ~re-search-forward~ or ~search-forward~.
    Buffer search function used by ~helm-candidates-in-buffer~.
    By default, ~helm-candidates-in-buffer~ uses ~re-search-forward~.
    The function should take one arg PATTERN.
    If your search function needs to handle negation like multimatch,
    this function should returns in such case a cons cell of two integers defining
    the beg and end positions to match in the line previously matched by
    ~re-search-forward~ or similar, and move point to next line
    (See how the ~helm-mm-3-search-base~ and ~helm-fuzzy-search~ functions are working).

    NOTE: FUZZY-MATCH slot will overhide value of this slot.

** search-strict
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    When specifying a search function within a source and
    helm-multi-match is enabled, the result of all searching
    functions will be concatened, which in some cases is not what
    is wanted. When using ~search-strict~ only this or these
    functions will be used. You can specify those functions as a
    list of functions or a single symbol function.

    NOTE: This have the same effect as using a nil value for
	  :MULTIMATCH slot.

** volatile
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  t

- :documentation

    Indicates the source assembles the candidate list dynamically,
    so it shouldn't be cached within a single Helm
    invocation. It is only applicable to synchronous sources,
    because asynchronous sources are not cached.

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-source-in-buffer))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-source-dummy

#+hcindex: helm-source-dummy

#+hcindex: helm-source

- *parents* ::

  - [[*class: helm-source]]

- *children* ::

This class has following slots

** accept-empty
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  t

- :documentation

    Allow exiting with an empty string.
    You should keep the default value.

** candidates
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  '("dummy")

- :documentation

    Specifies how to retrieve candidates from the source.
    It can either be a variable name, a function called with no parameters
    or the actual list of candidates.

    Do NOT use this for asynchronous sources, use ~candidates-process~
    instead.

    The list must be a list whose members are strings, symbols
    or (DISPLAY . REAL) pairs.

    In case of (DISPLAY . REAL) pairs, the DISPLAY string is shown
    in the Helm buffer, but the REAL one is used as action
    argument when the candidate is selected. This allows a more
    readable presentation for candidates which would otherwise be,
    for example, too long or have a common part shared with other
    candidates which can be safely replaced with an abbreviated
    string for display purposes.

    Note that if the (DISPLAY . REAL) form is used then pattern
    matching is done on the displayed string, not on the real
    value.

    This function, generally should not compute candidates according to
    ~helm-pattern~ which defeat all the Helm's matching mechanism
    i.e. multiple pattern matching and/or fuzzy matching.
    If you want to do so, use :match-dynamic slot to be sure matching
    occur only in :candidates function and there is no conflict with
    other match functions.

** filtered-candidate-transformer
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  (lambda (_candidates _source) (list helm-pattern))

- :documentation

    It has the same format as ~candidate-transformer~, except the
    function is called with two parameters: the candidate list and
    the source.

    This transformer is run on the candidate list which is already
    filtered by the current pattern. While ~candidate-transformer~
    is run only once, it is run every time the input pattern is
    changed.

    It can be used to transform the candidate list dynamically, for
    example, based on the current pattern.

    In some cases it may also be more efficent to perform candidate
    transformation here, instead of with ~candidate-transformer~
    even if this transformation is done every time the pattern is
    changed.  For example, if a candidate set is very large then
    ~candidate-transformer~ transforms every candidate while only
    some of them will actually be displayed due to the limit
    imposed by ~helm-candidate-number-limit~.

    Note that ~candidates~ and ~candidate-transformer~ is run
    already, so the given transformer function should also be able
    to handle candidates with (DISPLAY . REAL) format.

** match
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'identity

- :documentation

    List of functions called with one parameter: a candidate. The
    function should return non-nil if the candidate matches the
    current pattern (see variable ~helm-pattern~).

    When using ~candidates-in-buffer~ its default value is ~identity~ and
    don't have to be changed, use the ~search~ slot instead.

    This attribute allows the source to override the default
    pattern matching based on ~string-match~. It can be used, for
    example, to implement a source for file names and do the
    pattern matching on the basename of files, since it's more
    likely one is typing part of the basename when searching for a
    file, instead of some string anywhere else in its path.

    If the list contains more than one function then the list of
    matching candidates from the source is constructed by appending
    the results after invoking the first function on all the
    potential candidates, then the next function, and so on. The
    matching candidates supplied by the first function appear first
    in the list of results and then results from the other
    functions, respectively.

    This attribute has no effect for asynchronous sources (see
    attribute ~candidates~), and sources using ~match-dynamic~
    since they perform pattern matching themselves.

    Note that FUZZY-MATCH slot will overhide value of this slot.

** multimatch
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Use the multi-match algorithm when non-nil.
    I.e Allow specifying multiple patterns separated by spaces.
    When a pattern is prefixed by "!" the negation of this pattern is used,
    i.e match anything but this pattern.
    It is the standard way of matching in helm and is enabled by default.
    It can be used with fuzzy-matching enabled, but as soon helm detect a space,
    each pattern will match by regexp and will not be fuzzy.

** volatile
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  t

- :documentation

    Indicates the source assembles the candidate list dynamically,
    so it shouldn't be cached within a single Helm
    invocation. It is only applicable to synchronous sources,
    because asynchronous sources are not cached.

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-source-dummy))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-source-in-file

#+hcindex: helm-source-in-file

#+hcindex: helm-source-in-buffer

- *parents* ::

  - [[*class: helm-source-in-buffer]]

- *children* ::

This class has following slots

** init
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  (lambda nil (let ((file (helm-get-attr 'candidates-file)) (count 1)) (with-current-buffer (helm-candidate-buffer 'global) (insert-file-contents file) (goto-char (point-min)) (while (not (eobp)) (add-text-properties (point-at-bol) (point-at-eol) `(helm-linum ,count)) (cl-incf count) (forward-line 1)))))

- :documentation

    Function called with no parameters when helm is started.
    It is useful for collecting current state information which can be
    used to create the list of candidates later.
    Initialization of ~candidates-in-buffer~ is done here
    with ~helm-init-candidates-in-buffer~.

** candidates-file
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    A filename.
    Each line number of FILE is accessible with helm-linum property
    from candidate display part.

** get-line
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  #'buffer-substring

- :documentation

    A function like ~buffer-substring-no-properties~ or ~buffer-substring~.
    This function converts region from point at line-beginning and point
    at line-end in the ~helm-candidate-buffer~ to a string which will be displayed
    in the ~helm-buffer~, it takes two args BEG and END.
    By default, ~helm-candidates-in-buffer~ uses
    ~buffer-substring-no-properties~ which does no conversion and doesn't carry
    text properties.

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-source-in-buffer))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-type-file

#+hcindex: helm-type-file

#+hcindex: helm-source

#+hcindex: helm-mac-spotlight-source

#+hcindex: helm-files-dired-source

#+hcindex: helm-files-in-current-dir-source

#+hcindex: helm-recentf-source

#+hcindex: helm-file-cache

#+hcindex: helm-browse-project-override-inheritor

#+hcindex: helm-locate-override-inheritor

- *parents* ::

  - [[*class: helm-source]]

- *children* ::

  - [[*class: helm-mac-spotlight-source]]

  - [[*class: helm-files-dired-source]]

  - [[*class: helm-files-in-current-dir-source]]

  - [[*class: helm-recentf-source]]

  - [[*class: helm-file-cache]]

  - [[*class: helm-browse-project-override-inheritor]]

  - [[*class: helm-locate-override-inheritor]]

This class has following slots

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm-source-get-action-from-type~:

 ((object helm-type-file))

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-type-file))
 :before ((source helm-type-file))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-type-bookmark

#+hcindex: helm-type-bookmark

#+hcindex: helm-source

#+hcindex: helm-source-filtered-bookmarks

#+hcindex: helm-source-basic-bookmarks

- *parents* ::

  - [[*class: helm-source]]

- *children* ::

  - [[*class: helm-source-filtered-bookmarks]]

  - [[*class: helm-source-basic-bookmarks]]

This class has following slots

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm-source-get-action-from-type~:

 ((object helm-type-bookmark))

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-type-bookmark))
 :before ((source helm-type-bookmark))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-type-buffer

#+hcindex: helm-type-buffer

#+hcindex: helm-source

#+hcindex: helm-source-buffers

- *parents* ::

  - [[*class: helm-source]]

- *children* ::

  - [[*class: helm-source-buffers]]

This class has following slots

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm-source-get-action-from-type~:

 ((object helm-type-buffer))

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-type-buffer))
 :before ((source helm-type-buffer))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-type-function

#+hcindex: helm-type-function

#+hcindex: helm-source

- *parents* ::

  - [[*class: helm-source]]

- *children* ::

This class has following slots

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm-source-get-action-from-type~:

 ((object helm-type-function))

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-type-function))
 :before ((source helm-type-function))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-type-command

#+hcindex: helm-type-command

#+hcindex: helm-source

#+hcindex: helm-M-x-class

- *parents* ::

  - [[*class: helm-source]]

- *children* ::

  - [[*class: helm-M-x-class]]

This class has following slots

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-type-command))
 :before ((source helm-type-command))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-type-timers

#+hcindex: helm-type-timers

#+hcindex: helm-source

#+hcindex: helm-idle-time-timers-class

#+hcindex: helm-absolute-time-timers-class

- *parents* ::

  - [[*class: helm-source]]

- *children* ::

  - [[*class: helm-idle-time-timers-class]]

  - [[*class: helm-absolute-time-timers-class]]

This class has following slots

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-type-timers))
 :before ((source helm-type-timers))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-files-dired-source

#+hcindex: helm-files-dired-source

#+hcindex: helm-source-sync

#+hcindex: helm-type-file

- *parents* ::

  - [[*class: helm-source-sync]]

  - [[*class: helm-type-file]]

- *children* ::

This class has following slots

** candidates
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  #'helm-files-in-all-dired-candidates

- :documentation

    Specifies how to retrieve candidates from the source.
    It can either be a variable name, a function called with no parameters
    or the actual list of candidates.

    Do NOT use this for asynchronous sources, use ~candidates-process~
    instead.

    The list must be a list whose members are strings, symbols
    or (DISPLAY . REAL) pairs.

    In case of (DISPLAY . REAL) pairs, the DISPLAY string is shown
    in the Helm buffer, but the REAL one is used as action
    argument when the candidate is selected. This allows a more
    readable presentation for candidates which would otherwise be,
    for example, too long or have a common part shared with other
    candidates which can be safely replaced with an abbreviated
    string for display purposes.

    Note that if the (DISPLAY . REAL) form is used then pattern
    matching is done on the displayed string, not on the real
    value.

    This function, generally should not compute candidates according to
    ~helm-pattern~ which defeat all the Helm's matching mechanism
    i.e. multiple pattern matching and/or fuzzy matching.
    If you want to do so, use :match-dynamic slot to be sure matching
    occur only in :candidates function and there is no conflict with
    other match functions.

** match-dynamic
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Disable all helm matching functions when non nil.
    The :candidates function in this case is in charge of fetching
    candidates dynamically according to ~helm-pattern~.
    Note that :volatile is automatically enabled when using this, so no
    need to specify it.

** match-strict
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    When specifying a match function within a source and
    helm-multi-match is enabled, the result of all matching
    functions will be concatened, which in some cases is not what
    is wanted. When using ~match-strict~ only this or these
    functions will be used. You can specify those functions as a
    list of functions or a single symbol function.

    NOTE: This have the same effect as using :MULTIMATCH nil.

** migemo
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Enable migemo.
    When multimatch is disabled, you can give the symbol 'nomultimatch as value
    to force not using generic migemo matching function.
    In this case you have to provide your own migemo matching funtion
    that kick in when ~helm-migemo-mode~ is enabled.
    Otherwise it will be available for this source once ~helm-migemo-mode~
    is enabled when non-nil.

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm-source-get-action-from-type~:

 ((object helm-type-file))

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-source-sync))
 ((source helm-type-file))
 :before ((source helm-type-file))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-source-session-class

#+hcindex: helm-source-session-class

#+hcindex: helm-source-sync

- *parents* ::

  - [[*class: helm-source-sync]]

- *children* ::

This class has following slots

** action
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-type-file-actions

- :documentation

    An alist of (DISPLAY . FUNCTION) pairs, a variable name  or a function.
    FUNCTION is called with one parameter: the selected candidate.

    An action other than the default can be chosen from this list
    of actions for the currently selected candidate (by default
    with TAB). The DISPLAY string is shown in the completions
    buffer and the FUNCTION is invoked when an action is
    selected. The first action of the list is the default.

    You should use ~helm-make-actions~ to build this alist easily.

** candidates
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  (lambda nil (cl-delete-if-not (lambda (f) (or (string-match helm-tramp-file-name-regexp f) (file-exists-p f))) (mapcar 'car session-file-alist)))

- :documentation

    Specifies how to retrieve candidates from the source.
    It can either be a variable name, a function called with no parameters
    or the actual list of candidates.

    Do NOT use this for asynchronous sources, use ~candidates-process~
    instead.

    The list must be a list whose members are strings, symbols
    or (DISPLAY . REAL) pairs.

    In case of (DISPLAY . REAL) pairs, the DISPLAY string is shown
    in the Helm buffer, but the REAL one is used as action
    argument when the candidate is selected. This allows a more
    readable presentation for candidates which would otherwise be,
    for example, too long or have a common part shared with other
    candidates which can be safely replaced with an abbreviated
    string for display purposes.

    Note that if the (DISPLAY . REAL) form is used then pattern
    matching is done on the displayed string, not on the real
    value.

    This function, generally should not compute candidates according to
    ~helm-pattern~ which defeat all the Helm's matching mechanism
    i.e. multiple pattern matching and/or fuzzy matching.
    If you want to do so, use :match-dynamic slot to be sure matching
    occur only in :candidates function and there is no conflict with
    other match functions.

** help-message
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  helm-generic-file-help-message

- :documentation

    Help message for this source.
    If not present, ~helm-help-message~ value will be used.

** keymap
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  helm-generic-files-map

- :documentation

    Specific keymap for this source.
    default value is ~helm-map~.

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-source-sync))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-mac-spotlight-source

#+hcindex: helm-mac-spotlight-source

#+hcindex: helm-source-async

#+hcindex: helm-type-file

- *parents* ::

  - [[*class: helm-source-async]]

  - [[*class: helm-type-file]]

- *children* ::

This class has following slots

** candidates-process
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  (lambda nil (start-process "mdfind-process" nil "mdfind" helm-pattern))

- :documentation

    This attribute is used to define a process as candidate.
    The function called with no arguments must return a process
    i.e. ~processp~, it use typically ~start-process~ or ~make-process~,
    see (info "(elisp) Asynchronous Processes").

    NOTE:
    When building the source at runtime you can give directly a process
    as value, otherwise wrap the process call into a function.
    The process buffer should be nil, otherwise, if you use
    ~helm-buffer~ give to the process a sentinel.

** multimatch
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Use the multi-match algorithm when non-nil.
    I.e Allow specifying multiple patterns separated by spaces.
    When a pattern is prefixed by "!" the negation of this pattern is used,
    i.e match anything but this pattern.
    It is the standard way of matching in helm and is enabled by default.
    It can be used with fuzzy-matching enabled, but as soon helm detect a space,
    each pattern will match by regexp and will not be fuzzy.

** requires-pattern
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  3

- :documentation

    If present matches from the source are shown only if the
    pattern is not empty. Optionally, it can have an integer
    parameter specifying the required length of input which is
    useful in case of sources with lots of candidates.

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm-source-get-action-from-type~:

 ((object helm-type-file))

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-source-async))
 ((source helm-type-file))
 :before ((source helm-type-file))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-source-basic-bookmarks

#+hcindex: helm-source-basic-bookmarks

#+hcindex: helm-source-in-buffer

#+hcindex: helm-type-bookmark

- *parents* ::

  - [[*class: helm-source-in-buffer]]

  - [[*class: helm-type-bookmark]]

- *children* ::

This class has following slots

** init
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  (lambda nil (bookmark-maybe-load-default-file) (helm-init-candidates-in-buffer 'global (bookmark-all-names)))

- :documentation

    Function called with no parameters when helm is started.
    It is useful for collecting current state information which can be
    used to create the list of candidates later.
    Initialization of ~candidates-in-buffer~ is done here
    with ~helm-init-candidates-in-buffer~.

** candidates
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-candidates-in-buffer

- :documentation

    Specifies how to retrieve candidates from the source.
    It can either be a variable name, a function called with no parameters
    or the actual list of candidates.

    Do NOT use this for asynchronous sources, use ~candidates-process~
    instead.

    The list must be a list whose members are strings, symbols
    or (DISPLAY . REAL) pairs.

    In case of (DISPLAY . REAL) pairs, the DISPLAY string is shown
    in the Helm buffer, but the REAL one is used as action
    argument when the candidate is selected. This allows a more
    readable presentation for candidates which would otherwise be,
    for example, too long or have a common part shared with other
    candidates which can be safely replaced with an abbreviated
    string for display purposes.

    Note that if the (DISPLAY . REAL) form is used then pattern
    matching is done on the displayed string, not on the real
    value.

    This function, generally should not compute candidates according to
    ~helm-pattern~ which defeat all the Helm's matching mechanism
    i.e. multiple pattern matching and/or fuzzy matching.
    If you want to do so, use :match-dynamic slot to be sure matching
    occur only in :candidates function and there is no conflict with
    other match functions.

** data
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    A string, a list or a buffer that will be used to feed the ~helm-candidates-buffer~.
    This data will be passed in a function added to the init slot and
    the buffer will be build with ~helm-init-candidates-in-buffer~ or directly
    with ~helm-candidates-buffer~ if data is a buffer.
    This is an easy and fast method to build a ~candidates-in-buffer~ source.

** filtered-candidate-transformer
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-bookmark-transformer

- :documentation

    It has the same format as ~candidate-transformer~, except the
    function is called with two parameters: the candidate list and
    the source.

    This transformer is run on the candidate list which is already
    filtered by the current pattern. While ~candidate-transformer~
    is run only once, it is run every time the input pattern is
    changed.

    It can be used to transform the candidate list dynamically, for
    example, based on the current pattern.

    In some cases it may also be more efficent to perform candidate
    transformation here, instead of with ~candidate-transformer~
    even if this transformation is done every time the pattern is
    changed.  For example, if a candidate set is very large then
    ~candidate-transformer~ transforms every candidate while only
    some of them will actually be displayed due to the limit
    imposed by ~helm-candidate-number-limit~.

    Note that ~candidates~ and ~candidate-transformer~ is run
    already, so the given transformer function should also be able
    to handle candidates with (DISPLAY . REAL) format.

** get-line
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'buffer-substring-no-properties

- :documentation

    A function like ~buffer-substring-no-properties~ or ~buffer-substring~.
    This function converts region from point at line-beginning and point
    at line-end in the ~helm-candidate-buffer~ to a string which will be displayed
    in the ~helm-buffer~, it takes two args BEG and END.
    By default, ~helm-candidates-in-buffer~ uses
    ~buffer-substring-no-properties~ which does no conversion and doesn't carry
    text properties.

** match
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  '(identity)

- :documentation

    List of functions called with one parameter: a candidate. The
    function should return non-nil if the candidate matches the
    current pattern (see variable ~helm-pattern~).

    When using ~candidates-in-buffer~ its default value is ~identity~ and
    don't have to be changed, use the ~search~ slot instead.

    This attribute allows the source to override the default
    pattern matching based on ~string-match~. It can be used, for
    example, to implement a source for file names and do the
    pattern matching on the basename of files, since it's more
    likely one is typing part of the basename when searching for a
    file, instead of some string anywhere else in its path.

    If the list contains more than one function then the list of
    matching candidates from the source is constructed by appending
    the results after invoking the first function on all the
    potential candidates, then the next function, and so on. The
    matching candidates supplied by the first function appear first
    in the list of results and then results from the other
    functions, respectively.

    This attribute has no effect for asynchronous sources (see
    attribute ~candidates~), and sources using ~match-dynamic~
    since they perform pattern matching themselves.

    Note that FUZZY-MATCH slot will overhide value of this slot.

** migemo
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Enable migemo.
    When multimatch is disabled, you can give the symbol 'nomultimatch as value
    to force not using generic migemo matching function.
    In this case you have to provide your own migemo matching funtion
    that kick in when ~helm-migemo-mode~ is enabled.
    Otherwise it will be available for this source once ~helm-migemo-mode~
    is enabled when non-nil.

** search
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  '(helm-candidates-in-buffer-search-default-fn)

- :documentation

    List of functions like ~re-search-forward~ or ~search-forward~.
    Buffer search function used by ~helm-candidates-in-buffer~.
    By default, ~helm-candidates-in-buffer~ uses ~re-search-forward~.
    The function should take one arg PATTERN.
    If your search function needs to handle negation like multimatch,
    this function should returns in such case a cons cell of two integers defining
    the beg and end positions to match in the line previously matched by
    ~re-search-forward~ or similar, and move point to next line
    (See how the ~helm-mm-3-search-base~ and ~helm-fuzzy-search~ functions are working).

    NOTE: FUZZY-MATCH slot will overhide value of this slot.

** search-strict
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    When specifying a search function within a source and
    helm-multi-match is enabled, the result of all searching
    functions will be concatened, which in some cases is not what
    is wanted. When using ~search-strict~ only this or these
    functions will be used. You can specify those functions as a
    list of functions or a single symbol function.

    NOTE: This have the same effect as using a nil value for
	  :MULTIMATCH slot.

** volatile
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  t

- :documentation

    Indicates the source assembles the candidate list dynamically,
    so it shouldn't be cached within a single Helm
    invocation. It is only applicable to synchronous sources,
    because asynchronous sources are not cached.

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm-source-get-action-from-type~:

 ((object helm-type-bookmark))

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-source-in-buffer))
 ((source helm-type-bookmark))
 :before ((source helm-type-bookmark))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-source-filtered-bookmarks

#+hcindex: helm-source-filtered-bookmarks

#+hcindex: helm-source-in-buffer

#+hcindex: helm-type-bookmark

#+hcindex: helm-bookmark-find-files-class

- *parents* ::

  - [[*class: helm-source-in-buffer]]

  - [[*class: helm-type-bookmark]]

- *children* ::

  - [[*class: helm-bookmark-find-files-class]]

This class has following slots

** init
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-default-init-source-in-buffer-function

- :documentation

    Function called with no parameters when helm is started.
    It is useful for collecting current state information which can be
    used to create the list of candidates later.
    Initialization of ~candidates-in-buffer~ is done here
    with ~helm-init-candidates-in-buffer~.

** candidates
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-candidates-in-buffer

- :documentation

    Specifies how to retrieve candidates from the source.
    It can either be a variable name, a function called with no parameters
    or the actual list of candidates.

    Do NOT use this for asynchronous sources, use ~candidates-process~
    instead.

    The list must be a list whose members are strings, symbols
    or (DISPLAY . REAL) pairs.

    In case of (DISPLAY . REAL) pairs, the DISPLAY string is shown
    in the Helm buffer, but the REAL one is used as action
    argument when the candidate is selected. This allows a more
    readable presentation for candidates which would otherwise be,
    for example, too long or have a common part shared with other
    candidates which can be safely replaced with an abbreviated
    string for display purposes.

    Note that if the (DISPLAY . REAL) form is used then pattern
    matching is done on the displayed string, not on the real
    value.

    This function, generally should not compute candidates according to
    ~helm-pattern~ which defeat all the Helm's matching mechanism
    i.e. multiple pattern matching and/or fuzzy matching.
    If you want to do so, use :match-dynamic slot to be sure matching
    occur only in :candidates function and there is no conflict with
    other match functions.

** data
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    A string, a list or a buffer that will be used to feed the ~helm-candidates-buffer~.
    This data will be passed in a function added to the init slot and
    the buffer will be build with ~helm-init-candidates-in-buffer~ or directly
    with ~helm-candidates-buffer~ if data is a buffer.
    This is an easy and fast method to build a ~candidates-in-buffer~ source.

** filtered-candidate-transformer
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  '(helm-adaptive-sort helm-highlight-bookmark)

- :documentation

    It has the same format as ~candidate-transformer~, except the
    function is called with two parameters: the candidate list and
    the source.

    This transformer is run on the candidate list which is already
    filtered by the current pattern. While ~candidate-transformer~
    is run only once, it is run every time the input pattern is
    changed.

    It can be used to transform the candidate list dynamically, for
    example, based on the current pattern.

    In some cases it may also be more efficent to perform candidate
    transformation here, instead of with ~candidate-transformer~
    even if this transformation is done every time the pattern is
    changed.  For example, if a candidate set is very large then
    ~candidate-transformer~ transforms every candidate while only
    some of them will actually be displayed due to the limit
    imposed by ~helm-candidate-number-limit~.

    Note that ~candidates~ and ~candidate-transformer~ is run
    already, so the given transformer function should also be able
    to handle candidates with (DISPLAY . REAL) format.

** get-line
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'buffer-substring-no-properties

- :documentation

    A function like ~buffer-substring-no-properties~ or ~buffer-substring~.
    This function converts region from point at line-beginning and point
    at line-end in the ~helm-candidate-buffer~ to a string which will be displayed
    in the ~helm-buffer~, it takes two args BEG and END.
    By default, ~helm-candidates-in-buffer~ uses
    ~buffer-substring-no-properties~ which does no conversion and doesn't carry
    text properties.

** match
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  '(identity)

- :documentation

    List of functions called with one parameter: a candidate. The
    function should return non-nil if the candidate matches the
    current pattern (see variable ~helm-pattern~).

    When using ~candidates-in-buffer~ its default value is ~identity~ and
    don't have to be changed, use the ~search~ slot instead.

    This attribute allows the source to override the default
    pattern matching based on ~string-match~. It can be used, for
    example, to implement a source for file names and do the
    pattern matching on the basename of files, since it's more
    likely one is typing part of the basename when searching for a
    file, instead of some string anywhere else in its path.

    If the list contains more than one function then the list of
    matching candidates from the source is constructed by appending
    the results after invoking the first function on all the
    potential candidates, then the next function, and so on. The
    matching candidates supplied by the first function appear first
    in the list of results and then results from the other
    functions, respectively.

    This attribute has no effect for asynchronous sources (see
    attribute ~candidates~), and sources using ~match-dynamic~
    since they perform pattern matching themselves.

    Note that FUZZY-MATCH slot will overhide value of this slot.

** migemo
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Enable migemo.
    When multimatch is disabled, you can give the symbol 'nomultimatch as value
    to force not using generic migemo matching function.
    In this case you have to provide your own migemo matching funtion
    that kick in when ~helm-migemo-mode~ is enabled.
    Otherwise it will be available for this source once ~helm-migemo-mode~
    is enabled when non-nil.

** search
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  '(helm-candidates-in-buffer-search-default-fn)

- :documentation

    List of functions like ~re-search-forward~ or ~search-forward~.
    Buffer search function used by ~helm-candidates-in-buffer~.
    By default, ~helm-candidates-in-buffer~ uses ~re-search-forward~.
    The function should take one arg PATTERN.
    If your search function needs to handle negation like multimatch,
    this function should returns in such case a cons cell of two integers defining
    the beg and end positions to match in the line previously matched by
    ~re-search-forward~ or similar, and move point to next line
    (See how the ~helm-mm-3-search-base~ and ~helm-fuzzy-search~ functions are working).

    NOTE: FUZZY-MATCH slot will overhide value of this slot.

** search-strict
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    When specifying a search function within a source and
    helm-multi-match is enabled, the result of all searching
    functions will be concatened, which in some cases is not what
    is wanted. When using ~search-strict~ only this or these
    functions will be used. You can specify those functions as a
    list of functions or a single symbol function.

    NOTE: This have the same effect as using a nil value for
	  :MULTIMATCH slot.

** volatile
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  t

- :documentation

    Indicates the source assembles the candidate list dynamically,
    so it shouldn't be cached within a single Helm
    invocation. It is only applicable to synchronous sources,
    because asynchronous sources are not cached.

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm-source-get-action-from-type~:

 ((object helm-type-bookmark))

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-source-in-buffer))
 ((source helm-type-bookmark))
 :before ((source helm-type-bookmark))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-bookmark-override-inheritor

#+hcindex: helm-bookmark-override-inheritor

#+hcindex: helm-source

#+hcindex: helm-bookmark-find-files-class

- *parents* ::

  - [[*class: helm-source]]

- *children* ::

  - [[*class: helm-bookmark-find-files-class]]

This class has following slots

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-bookmark-override-inheritor))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-bookmark-find-files-class

#+hcindex: helm-bookmark-find-files-class

#+hcindex: helm-source-filtered-bookmarks

#+hcindex: helm-bookmark-override-inheritor

- *parents* ::

  - [[*class: helm-source-filtered-bookmarks]]

  - [[*class: helm-bookmark-override-inheritor]]

- *children* ::

This class has following slots

** init
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-default-init-source-in-buffer-function

- :documentation

    Function called with no parameters when helm is started.
    It is useful for collecting current state information which can be
    used to create the list of candidates later.
    Initialization of ~candidates-in-buffer~ is done here
    with ~helm-init-candidates-in-buffer~.

** candidates
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-candidates-in-buffer

- :documentation

    Specifies how to retrieve candidates from the source.
    It can either be a variable name, a function called with no parameters
    or the actual list of candidates.

    Do NOT use this for asynchronous sources, use ~candidates-process~
    instead.

    The list must be a list whose members are strings, symbols
    or (DISPLAY . REAL) pairs.

    In case of (DISPLAY . REAL) pairs, the DISPLAY string is shown
    in the Helm buffer, but the REAL one is used as action
    argument when the candidate is selected. This allows a more
    readable presentation for candidates which would otherwise be,
    for example, too long or have a common part shared with other
    candidates which can be safely replaced with an abbreviated
    string for display purposes.

    Note that if the (DISPLAY . REAL) form is used then pattern
    matching is done on the displayed string, not on the real
    value.

    This function, generally should not compute candidates according to
    ~helm-pattern~ which defeat all the Helm's matching mechanism
    i.e. multiple pattern matching and/or fuzzy matching.
    If you want to do so, use :match-dynamic slot to be sure matching
    occur only in :candidates function and there is no conflict with
    other match functions.

** data
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    A string, a list or a buffer that will be used to feed the ~helm-candidates-buffer~.
    This data will be passed in a function added to the init slot and
    the buffer will be build with ~helm-init-candidates-in-buffer~ or directly
    with ~helm-candidates-buffer~ if data is a buffer.
    This is an easy and fast method to build a ~candidates-in-buffer~ source.

** filtered-candidate-transformer
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  '(helm-adaptive-sort helm-highlight-bookmark)

- :documentation

    It has the same format as ~candidate-transformer~, except the
    function is called with two parameters: the candidate list and
    the source.

    This transformer is run on the candidate list which is already
    filtered by the current pattern. While ~candidate-transformer~
    is run only once, it is run every time the input pattern is
    changed.

    It can be used to transform the candidate list dynamically, for
    example, based on the current pattern.

    In some cases it may also be more efficent to perform candidate
    transformation here, instead of with ~candidate-transformer~
    even if this transformation is done every time the pattern is
    changed.  For example, if a candidate set is very large then
    ~candidate-transformer~ transforms every candidate while only
    some of them will actually be displayed due to the limit
    imposed by ~helm-candidate-number-limit~.

    Note that ~candidates~ and ~candidate-transformer~ is run
    already, so the given transformer function should also be able
    to handle candidates with (DISPLAY . REAL) format.

** get-line
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'buffer-substring-no-properties

- :documentation

    A function like ~buffer-substring-no-properties~ or ~buffer-substring~.
    This function converts region from point at line-beginning and point
    at line-end in the ~helm-candidate-buffer~ to a string which will be displayed
    in the ~helm-buffer~, it takes two args BEG and END.
    By default, ~helm-candidates-in-buffer~ uses
    ~buffer-substring-no-properties~ which does no conversion and doesn't carry
    text properties.

** match
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  '(identity)

- :documentation

    List of functions called with one parameter: a candidate. The
    function should return non-nil if the candidate matches the
    current pattern (see variable ~helm-pattern~).

    When using ~candidates-in-buffer~ its default value is ~identity~ and
    don't have to be changed, use the ~search~ slot instead.

    This attribute allows the source to override the default
    pattern matching based on ~string-match~. It can be used, for
    example, to implement a source for file names and do the
    pattern matching on the basename of files, since it's more
    likely one is typing part of the basename when searching for a
    file, instead of some string anywhere else in its path.

    If the list contains more than one function then the list of
    matching candidates from the source is constructed by appending
    the results after invoking the first function on all the
    potential candidates, then the next function, and so on. The
    matching candidates supplied by the first function appear first
    in the list of results and then results from the other
    functions, respectively.

    This attribute has no effect for asynchronous sources (see
    attribute ~candidates~), and sources using ~match-dynamic~
    since they perform pattern matching themselves.

    Note that FUZZY-MATCH slot will overhide value of this slot.

** migemo
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Enable migemo.
    When multimatch is disabled, you can give the symbol 'nomultimatch as value
    to force not using generic migemo matching function.
    In this case you have to provide your own migemo matching funtion
    that kick in when ~helm-migemo-mode~ is enabled.
    Otherwise it will be available for this source once ~helm-migemo-mode~
    is enabled when non-nil.

** search
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  '(helm-candidates-in-buffer-search-default-fn)

- :documentation

    List of functions like ~re-search-forward~ or ~search-forward~.
    Buffer search function used by ~helm-candidates-in-buffer~.
    By default, ~helm-candidates-in-buffer~ uses ~re-search-forward~.
    The function should take one arg PATTERN.
    If your search function needs to handle negation like multimatch,
    this function should returns in such case a cons cell of two integers defining
    the beg and end positions to match in the line previously matched by
    ~re-search-forward~ or similar, and move point to next line
    (See how the ~helm-mm-3-search-base~ and ~helm-fuzzy-search~ functions are working).

    NOTE: FUZZY-MATCH slot will overhide value of this slot.

** search-strict
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    When specifying a search function within a source and
    helm-multi-match is enabled, the result of all searching
    functions will be concatened, which in some cases is not what
    is wanted. When using ~search-strict~ only this or these
    functions will be used. You can specify those functions as a
    list of functions or a single symbol function.

    NOTE: This have the same effect as using a nil value for
	  :MULTIMATCH slot.

** volatile
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  t

- :documentation

    Indicates the source assembles the candidate list dynamically,
    so it shouldn't be cached within a single Helm
    invocation. It is only applicable to synchronous sources,
    because asynchronous sources are not cached.

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm-source-get-action-from-type~:

 ((object helm-type-bookmark))

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-source-in-buffer))
 ((source helm-type-bookmark))
 :before ((source helm-type-bookmark))
 ((source helm-bookmark-override-inheritor))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-source-buffers

#+hcindex: helm-source-buffers

#+hcindex: helm-source-sync

#+hcindex: helm-type-buffer

- *parents* ::

  - [[*class: helm-source-sync]]

  - [[*class: helm-type-buffer]]

- *children* ::

This class has following slots

** init
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-buffers-list--init

- :documentation

    Function called with no parameters when helm is started.
    It is useful for collecting current state information which can be
    used to create the list of candidates later.
    Initialization of ~candidates-in-buffer~ is done here
    with ~helm-init-candidates-in-buffer~.

** buffer-list
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  #'helm-buffer-list

- :documentation

    A function with no arguments to create buffer list.

** candidates
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  '("ERROR: You must specify the ~candidates~ slot, either with a list or a function")

- :documentation

    Specifies how to retrieve candidates from the source.
    It can either be a variable name, a function called with no parameters
    or the actual list of candidates.

    Do NOT use this for asynchronous sources, use ~candidates-process~
    instead.

    The list must be a list whose members are strings, symbols
    or (DISPLAY . REAL) pairs.

    In case of (DISPLAY . REAL) pairs, the DISPLAY string is shown
    in the Helm buffer, but the REAL one is used as action
    argument when the candidate is selected. This allows a more
    readable presentation for candidates which would otherwise be,
    for example, too long or have a common part shared with other
    candidates which can be safely replaced with an abbreviated
    string for display purposes.

    Note that if the (DISPLAY . REAL) form is used then pattern
    matching is done on the displayed string, not on the real
    value.

    This function, generally should not compute candidates according to
    ~helm-pattern~ which defeat all the Helm's matching mechanism
    i.e. multiple pattern matching and/or fuzzy matching.
    If you want to do so, use :match-dynamic slot to be sure matching
    occur only in :candidates function and there is no conflict with
    other match functions.

** help-message
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-buffer-help-message

- :documentation

    Help message for this source.
    If not present, ~helm-help-message~ value will be used.

** keymap
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  helm-buffer-map

- :documentation

    Specific keymap for this source.
    default value is ~helm-map~.

** match
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-buffers-match-function

- :documentation

    List of functions called with one parameter: a candidate. The
    function should return non-nil if the candidate matches the
    current pattern (see variable ~helm-pattern~).

    When using ~candidates-in-buffer~ its default value is ~identity~ and
    don't have to be changed, use the ~search~ slot instead.

    This attribute allows the source to override the default
    pattern matching based on ~string-match~. It can be used, for
    example, to implement a source for file names and do the
    pattern matching on the basename of files, since it's more
    likely one is typing part of the basename when searching for a
    file, instead of some string anywhere else in its path.

    If the list contains more than one function then the list of
    matching candidates from the source is constructed by appending
    the results after invoking the first function on all the
    potential candidates, then the next function, and so on. The
    matching candidates supplied by the first function appear first
    in the list of results and then results from the other
    functions, respectively.

    This attribute has no effect for asynchronous sources (see
    attribute ~candidates~), and sources using ~match-dynamic~
    since they perform pattern matching themselves.

    Note that FUZZY-MATCH slot will overhide value of this slot.

** match-dynamic
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Disable all helm matching functions when non nil.
    The :candidates function in this case is in charge of fetching
    candidates dynamically according to ~helm-pattern~.
    Note that :volatile is automatically enabled when using this, so no
    need to specify it.

** match-strict
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    When specifying a match function within a source and
    helm-multi-match is enabled, the result of all matching
    functions will be concatened, which in some cases is not what
    is wanted. When using ~match-strict~ only this or these
    functions will be used. You can specify those functions as a
    list of functions or a single symbol function.

    NOTE: This have the same effect as using :MULTIMATCH nil.

** migemo
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'nomultimatch

- :documentation

    Enable migemo.
    When multimatch is disabled, you can give the symbol 'nomultimatch as value
    to force not using generic migemo matching function.
    In this case you have to provide your own migemo matching funtion
    that kick in when ~helm-migemo-mode~ is enabled.
    Otherwise it will be available for this source once ~helm-migemo-mode~
    is enabled when non-nil.

** multimatch
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Use the multi-match algorithm when non-nil.
    I.e Allow specifying multiple patterns separated by spaces.
    When a pattern is prefixed by "!" the negation of this pattern is used,
    i.e match anything but this pattern.
    It is the standard way of matching in helm and is enabled by default.
    It can be used with fuzzy-matching enabled, but as soon helm detect a space,
    each pattern will match by regexp and will not be fuzzy.

** nohighlight
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  t

- :documentation

    Disable highlighting matches in this source.
    This will disable generic highlighting of matches,
    but some specialized highlighting can be done from elsewhere,
    i.e from ~filtered-candidate-transformer~ or ~filter-one-by-one~ slots.
    So use this to either disable completely highlighting in your source,
    or to disable highlighting and use a specialized highlighting matches
    function for this source.
    Remember that this function should run AFTER all filter functions if those
    filter functions are modifying face properties, though it is possible to
    avoid this by using new ~add-face-text-property~ in your filter functions.

** persistent-action
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-buffers-list-persistent-action

- :documentation

    Can be a either a Function called with one parameter (the
    selected candidate) or a cons cell where first element is this
    same function and second element a symbol (e.g never-split)
    that inform ~helm-execute-persistent-action~ to not split his
    window to execute this persistent action.
    Example:

      (defun foo-persistent-action (candidate)
	 (do-something candidate))

      :persistent-action '(foo-persistent-action . never-split) ; Don't split
    or
      :persistent-action 'foo-persistent-action ; Split

    When specifying :persistent-action by slot directly, foo-persistent-action
    will be executed without quitting helm when hitting ~C-j~.

    Note that other persistent actions can be defined using other
    bindings than ~C-j~ by simply defining an interactive function bound
    to a key in the keymap source.
    The function should create a new attribute in source before calling
    ~helm-execute-persistent-action~ on this attribute.
    Example:

       (defun helm-ff-persistent-delete ()
	 "Delete current candidate without quitting."
	 (interactive)
	 (with-helm-alive-p
	   (helm-set-attr 'quick-delete '(helm-ff-quick-delete . never-split))
	   (helm-execute-persistent-action 'quick-delete)))

    This function is then bound in ~helm-find-files-map~.

** resume
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  (lambda nil (setq helm-buffers-in-project-p nil))

- :documentation

    Function called with no parameters at end of initialization
    when ~helm-resume~ is started.
    If this function try to do something against ~helm-buffer~, (e.g updating,
    searching etc...) probably you should run it in a timer to ensure
    ~helm-buffer~ is ready.

** volatile
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  t

- :documentation

    Indicates the source assembles the candidate list dynamically,
    so it shouldn't be cached within a single Helm
    invocation. It is only applicable to synchronous sources,
    because asynchronous sources are not cached.

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm-source-get-action-from-type~:

 ((object helm-type-buffer))

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-source-sync))
 ((source helm-type-buffer))
 :before ((source helm-type-buffer))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-M-x-class

#+hcindex: helm-M-x-class

#+hcindex: helm-source-sync

#+hcindex: helm-type-command

- *parents* ::

  - [[*class: helm-source-sync]]

  - [[*class: helm-type-command]]

- *children* ::

This class has following slots

** candidates
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  '("ERROR: You must specify the ~candidates~ slot, either with a list or a function")

- :documentation

    Specifies how to retrieve candidates from the source.
    It can either be a variable name, a function called with no parameters
    or the actual list of candidates.

    Do NOT use this for asynchronous sources, use ~candidates-process~
    instead.

    The list must be a list whose members are strings, symbols
    or (DISPLAY . REAL) pairs.

    In case of (DISPLAY . REAL) pairs, the DISPLAY string is shown
    in the Helm buffer, but the REAL one is used as action
    argument when the candidate is selected. This allows a more
    readable presentation for candidates which would otherwise be,
    for example, too long or have a common part shared with other
    candidates which can be safely replaced with an abbreviated
    string for display purposes.

    Note that if the (DISPLAY . REAL) form is used then pattern
    matching is done on the displayed string, not on the real
    value.

    This function, generally should not compute candidates according to
    ~helm-pattern~ which defeat all the Helm's matching mechanism
    i.e. multiple pattern matching and/or fuzzy matching.
    If you want to do so, use :match-dynamic slot to be sure matching
    occur only in :candidates function and there is no conflict with
    other match functions.

** filtered-candidate-transformer
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-M-x-transformer-no-sort

- :documentation

    It has the same format as ~candidate-transformer~, except the
    function is called with two parameters: the candidate list and
    the source.

    This transformer is run on the candidate list which is already
    filtered by the current pattern. While ~candidate-transformer~
    is run only once, it is run every time the input pattern is
    changed.

    It can be used to transform the candidate list dynamically, for
    example, based on the current pattern.

    In some cases it may also be more efficent to perform candidate
    transformation here, instead of with ~candidate-transformer~
    even if this transformation is done every time the pattern is
    changed.  For example, if a candidate set is very large then
    ~candidate-transformer~ transforms every candidate while only
    some of them will actually be displayed due to the limit
    imposed by ~helm-candidate-number-limit~.

    Note that ~candidates~ and ~candidate-transformer~ is run
    already, so the given transformer function should also be able
    to handle candidates with (DISPLAY . REAL) format.

** help-message
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-M-x-help-message

- :documentation

    Help message for this source.
    If not present, ~helm-help-message~ value will be used.

** keymap
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  helm-M-x-map

- :documentation

    Specific keymap for this source.
    default value is ~helm-map~.

** match-dynamic
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Disable all helm matching functions when non nil.
    The :candidates function in this case is in charge of fetching
    candidates dynamically according to ~helm-pattern~.
    Note that :volatile is automatically enabled when using this, so no
    need to specify it.

** match-strict
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    When specifying a match function within a source and
    helm-multi-match is enabled, the result of all matching
    functions will be concatened, which in some cases is not what
    is wanted. When using ~match-strict~ only this or these
    functions will be used. You can specify those functions as a
    list of functions or a single symbol function.

    NOTE: This have the same effect as using :MULTIMATCH nil.

** migemo
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Enable migemo.
    When multimatch is disabled, you can give the symbol 'nomultimatch as value
    to force not using generic migemo matching function.
    In this case you have to provide your own migemo matching funtion
    that kick in when ~helm-migemo-mode~ is enabled.
    Otherwise it will be available for this source once ~helm-migemo-mode~
    is enabled when non-nil.

** must-match
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  t

- :documentation

    Same as ~completing-read~ require-match arg.
    Possible values are:
    - ~t~ which prevent exiting with an empty helm-buffer i.e. no matches.
    - ~confirm~ which ask for confirmation i.e. need to press a second
       time RET.
    - ~nil~ is the default and is doing nothing i.e. returns nil when
      pressing RET with an empty helm-buffer.
    - Any other non nil values e.g. ~ignore~ allow exiting with
      minibuffer contents as candidate value (in this case helm-buffer
      is empty).

** nomark
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  t

- :documentation

    Don't allow marking candidates when this attribute is present.

** persistent-help
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  "Describe this command"

- :documentation

    A string to explain persistent-action of this source. It also
    accepts a function or a variable name.
    It will be displayed in ~header-line~ or in ~minibuffer~ depending
    of value of ~helm-echo-input-in-header-line~ and ~helm-display-header-line~.

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-source-sync))
 ((source helm-type-command))
 :before ((source helm-type-command))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-absolute-time-timers-class

#+hcindex: helm-absolute-time-timers-class

#+hcindex: helm-source-sync

#+hcindex: helm-type-timers

- *parents* ::

  - [[*class: helm-source-sync]]

  - [[*class: helm-type-timers]]

- *children* ::

This class has following slots

** allow-dups
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  t

- :documentation

    Allow helm collecting duplicates candidates.

** candidate-transformer
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  (lambda (candidates) (cl-loop for timer in candidates collect (cons (helm-elisp--format-timer timer) timer)))

- :documentation

    It's a function or a list of functions called with one argument
    when the completion list from the source is built. The argument
    is the list of candidates retrieved from the source. The
    function should return a transformed list of candidates which
    will be used for the actual completion.  If it is a list of
    functions, it calls each function sequentially.

    This can be used to transform or remove items from the list of
    candidates.

    Note that ~candidates~ is run already, so the given transformer
    function should also be able to handle candidates with (DISPLAY
    . REAL) format.

** candidates
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  timer-list

- :documentation

    Specifies how to retrieve candidates from the source.
    It can either be a variable name, a function called with no parameters
    or the actual list of candidates.

    Do NOT use this for asynchronous sources, use ~candidates-process~
    instead.

    The list must be a list whose members are strings, symbols
    or (DISPLAY . REAL) pairs.

    In case of (DISPLAY . REAL) pairs, the DISPLAY string is shown
    in the Helm buffer, but the REAL one is used as action
    argument when the candidate is selected. This allows a more
    readable presentation for candidates which would otherwise be,
    for example, too long or have a common part shared with other
    candidates which can be safely replaced with an abbreviated
    string for display purposes.

    Note that if the (DISPLAY . REAL) form is used then pattern
    matching is done on the displayed string, not on the real
    value.

    This function, generally should not compute candidates according to
    ~helm-pattern~ which defeat all the Helm's matching mechanism
    i.e. multiple pattern matching and/or fuzzy matching.
    If you want to do so, use :match-dynamic slot to be sure matching
    occur only in :candidates function and there is no conflict with
    other match functions.

** match-dynamic
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Disable all helm matching functions when non nil.
    The :candidates function in this case is in charge of fetching
    candidates dynamically according to ~helm-pattern~.
    Note that :volatile is automatically enabled when using this, so no
    need to specify it.

** match-strict
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    When specifying a match function within a source and
    helm-multi-match is enabled, the result of all matching
    functions will be concatened, which in some cases is not what
    is wanted. When using ~match-strict~ only this or these
    functions will be used. You can specify those functions as a
    list of functions or a single symbol function.

    NOTE: This have the same effect as using :MULTIMATCH nil.

** migemo
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Enable migemo.
    When multimatch is disabled, you can give the symbol 'nomultimatch as value
    to force not using generic migemo matching function.
    In this case you have to provide your own migemo matching funtion
    that kick in when ~helm-migemo-mode~ is enabled.
    Otherwise it will be available for this source once ~helm-migemo-mode~
    is enabled when non-nil.

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-source-sync))
 ((source helm-type-timers))
 :before ((source helm-type-timers))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-idle-time-timers-class

#+hcindex: helm-idle-time-timers-class

#+hcindex: helm-source-sync

#+hcindex: helm-type-timers

- *parents* ::

  - [[*class: helm-source-sync]]

  - [[*class: helm-type-timers]]

- *children* ::

This class has following slots

** allow-dups
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  t

- :documentation

    Allow helm collecting duplicates candidates.

** candidate-transformer
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  (lambda (candidates) (cl-loop for timer in candidates collect (cons (helm-elisp--format-timer timer) timer)))

- :documentation

    It's a function or a list of functions called with one argument
    when the completion list from the source is built. The argument
    is the list of candidates retrieved from the source. The
    function should return a transformed list of candidates which
    will be used for the actual completion.  If it is a list of
    functions, it calls each function sequentially.

    This can be used to transform or remove items from the list of
    candidates.

    Note that ~candidates~ is run already, so the given transformer
    function should also be able to handle candidates with (DISPLAY
    . REAL) format.

** candidates
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  timer-idle-list

- :documentation

    Specifies how to retrieve candidates from the source.
    It can either be a variable name, a function called with no parameters
    or the actual list of candidates.

    Do NOT use this for asynchronous sources, use ~candidates-process~
    instead.

    The list must be a list whose members are strings, symbols
    or (DISPLAY . REAL) pairs.

    In case of (DISPLAY . REAL) pairs, the DISPLAY string is shown
    in the Helm buffer, but the REAL one is used as action
    argument when the candidate is selected. This allows a more
    readable presentation for candidates which would otherwise be,
    for example, too long or have a common part shared with other
    candidates which can be safely replaced with an abbreviated
    string for display purposes.

    Note that if the (DISPLAY . REAL) form is used then pattern
    matching is done on the displayed string, not on the real
    value.

    This function, generally should not compute candidates according to
    ~helm-pattern~ which defeat all the Helm's matching mechanism
    i.e. multiple pattern matching and/or fuzzy matching.
    If you want to do so, use :match-dynamic slot to be sure matching
    occur only in :candidates function and there is no conflict with
    other match functions.

** match-dynamic
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Disable all helm matching functions when non nil.
    The :candidates function in this case is in charge of fetching
    candidates dynamically according to ~helm-pattern~.
    Note that :volatile is automatically enabled when using this, so no
    need to specify it.

** match-strict
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    When specifying a match function within a source and
    helm-multi-match is enabled, the result of all matching
    functions will be concatened, which in some cases is not what
    is wanted. When using ~match-strict~ only this or these
    functions will be used. You can specify those functions as a
    list of functions or a single symbol function.

    NOTE: This have the same effect as using :MULTIMATCH nil.

** migemo
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Enable migemo.
    When multimatch is disabled, you can give the symbol 'nomultimatch as value
    to force not using generic migemo matching function.
    In this case you have to provide your own migemo matching funtion
    that kick in when ~helm-migemo-mode~ is enabled.
    Otherwise it will be available for this source once ~helm-migemo-mode~
    is enabled when non-nil.

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-source-sync))
 ((source helm-type-timers))
 :before ((source helm-type-timers))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-list-el-package-source

#+hcindex: helm-list-el-package-source

#+hcindex: helm-source-in-buffer

- *parents* ::

  - [[*class: helm-source-in-buffer]]

- *children* ::

This class has following slots

** init
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-el-package--init

- :documentation

    Function called with no parameters when helm is started.
    It is useful for collecting current state information which can be
    used to create the list of candidates later.
    Initialization of ~candidates-in-buffer~ is done here
    with ~helm-init-candidates-in-buffer~.

** action
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  '(("Describe package" . helm-el-package-describe) ("Visit homepage" . helm-el-package-visit-homepage))

- :documentation

    An alist of (DISPLAY . FUNCTION) pairs, a variable name  or a function.
    FUNCTION is called with one parameter: the selected candidate.

    An action other than the default can be chosen from this list
    of actions for the currently selected candidate (by default
    with TAB). The DISPLAY string is shown in the completions
    buffer and the FUNCTION is invoked when an action is
    selected. The first action of the list is the default.

    You should use ~helm-make-actions~ to build this alist easily.

** action-transformer
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-el-package--action-transformer

- :documentation

    It's a function or a list of functions called with two
    arguments when the action list from the source is
    assembled. The first argument is the list of actions, the
    second is the current selection.  If it is a list of functions,
    it calls each function sequentially.

    The function should return a transformed action list.

    This can be used to customize the list of actions based on the
    currently selected candidate.

** candidate-number-limit
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  9999

- :documentation

    Override ~helm-candidate-number-limit~ only for this source.

** filtered-candidate-transformer
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-el-package--transformer

- :documentation

    It has the same format as ~candidate-transformer~, except the
    function is called with two parameters: the candidate list and
    the source.

    This transformer is run on the candidate list which is already
    filtered by the current pattern. While ~candidate-transformer~
    is run only once, it is run every time the input pattern is
    changed.

    It can be used to transform the candidate list dynamically, for
    example, based on the current pattern.

    In some cases it may also be more efficent to perform candidate
    transformation here, instead of with ~candidate-transformer~
    even if this transformation is done every time the pattern is
    changed.  For example, if a candidate set is very large then
    ~candidate-transformer~ transforms every candidate while only
    some of them will actually be displayed due to the limit
    imposed by ~helm-candidate-number-limit~.

    Note that ~candidates~ and ~candidate-transformer~ is run
    already, so the given transformer function should also be able
    to handle candidates with (DISPLAY . REAL) format.

** get-line
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'buffer-substring

- :documentation

    A function like ~buffer-substring-no-properties~ or ~buffer-substring~.
    This function converts region from point at line-beginning and point
    at line-end in the ~helm-candidate-buffer~ to a string which will be displayed
    in the ~helm-buffer~, it takes two args BEG and END.
    By default, ~helm-candidates-in-buffer~ uses
    ~buffer-substring-no-properties~ which does no conversion and doesn't carry
    text properties.

** group
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-el-package

- :documentation

    The current source group, default to ~helm~ when not specified.

** help-message
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-el-package-help-message

- :documentation

    Help message for this source.
    If not present, ~helm-help-message~ value will be used.

** keymap
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  helm-el-package-map

- :documentation

    Specific keymap for this source.
    default value is ~helm-map~.

** update
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-el-package--update

- :documentation

    Function called with no parameters at before "init" function
    when ~helm-force-update~ is called.

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-source-in-buffer))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-epa

#+hcindex: helm-epa

#+hcindex: helm-source-sync

- *parents* ::

  - [[*class: helm-source-sync]]

- *children* ::

This class has following slots

** init
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  (lambda nil (require 'epg) (require 'epa))

- :documentation

    Function called with no parameters when helm is started.
    It is useful for collecting current state information which can be
    used to create the list of candidates later.
    Initialization of ~candidates-in-buffer~ is done here
    with ~helm-init-candidates-in-buffer~.

** candidates
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-epa-get-key-list

- :documentation

    Specifies how to retrieve candidates from the source.
    It can either be a variable name, a function called with no parameters
    or the actual list of candidates.

    Do NOT use this for asynchronous sources, use ~candidates-process~
    instead.

    The list must be a list whose members are strings, symbols
    or (DISPLAY . REAL) pairs.

    In case of (DISPLAY . REAL) pairs, the DISPLAY string is shown
    in the Helm buffer, but the REAL one is used as action
    argument when the candidate is selected. This allows a more
    readable presentation for candidates which would otherwise be,
    for example, too long or have a common part shared with other
    candidates which can be safely replaced with an abbreviated
    string for display purposes.

    Note that if the (DISPLAY . REAL) form is used then pattern
    matching is done on the displayed string, not on the real
    value.

    This function, generally should not compute candidates according to
    ~helm-pattern~ which defeat all the Helm's matching mechanism
    i.e. multiple pattern matching and/or fuzzy matching.
    If you want to do so, use :match-dynamic slot to be sure matching
    occur only in :candidates function and there is no conflict with
    other match functions.

** keymap
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  helm-comp-read-map

- :documentation

    Specific keymap for this source.
    default value is ~helm-map~.

** mode-line
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  helm-comp-read-mode-line

- :documentation

    Source local ~helm-mode-line-string~ (included in
    ~mode-line-format~). It accepts also variable/function name.

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-source-sync))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-esh-source

#+hcindex: helm-esh-source

#+hcindex: helm-source-sync

- *parents* ::

  - [[*class: helm-source-sync]]

- *children* ::

This class has following slots

** init
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  (lambda nil (setq pcomplete-current-completions nil pcomplete-last-completion-raw nil) (remove-hook 'minibuffer-setup-hook 'eshell-mode))

- :documentation

    Function called with no parameters when helm is started.
    It is useful for collecting current state information which can be
    used to create the list of candidates later.
    Initialization of ~candidates-in-buffer~ is done here
    with ~helm-init-candidates-in-buffer~.

** action
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-ec-insert

- :documentation

    An alist of (DISPLAY . FUNCTION) pairs, a variable name  or a function.
    FUNCTION is called with one parameter: the selected candidate.

    An action other than the default can be chosen from this list
    of actions for the currently selected candidate (by default
    with TAB). The DISPLAY string is shown in the completions
    buffer and the FUNCTION is invoked when an action is
    selected. The first action of the list is the default.

    You should use ~helm-make-actions~ to build this alist easily.

** candidates
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-esh-get-candidates

- :documentation

    Specifies how to retrieve candidates from the source.
    It can either be a variable name, a function called with no parameters
    or the actual list of candidates.

    Do NOT use this for asynchronous sources, use ~candidates-process~
    instead.

    The list must be a list whose members are strings, symbols
    or (DISPLAY . REAL) pairs.

    In case of (DISPLAY . REAL) pairs, the DISPLAY string is shown
    in the Helm buffer, but the REAL one is used as action
    argument when the candidate is selected. This allows a more
    readable presentation for candidates which would otherwise be,
    for example, too long or have a common part shared with other
    candidates which can be safely replaced with an abbreviated
    string for display purposes.

    Note that if the (DISPLAY . REAL) form is used then pattern
    matching is done on the displayed string, not on the real
    value.

    This function, generally should not compute candidates according to
    ~helm-pattern~ which defeat all the Helm's matching mechanism
    i.e. multiple pattern matching and/or fuzzy matching.
    If you want to do so, use :match-dynamic slot to be sure matching
    occur only in :candidates function and there is no conflict with
    other match functions.

** filtered-candidate-transformer
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  #'helm-esh-transformer

- :documentation

    It has the same format as ~candidate-transformer~, except the
    function is called with two parameters: the candidate list and
    the source.

    This transformer is run on the candidate list which is already
    filtered by the current pattern. While ~candidate-transformer~
    is run only once, it is run every time the input pattern is
    changed.

    It can be used to transform the candidate list dynamically, for
    example, based on the current pattern.

    In some cases it may also be more efficent to perform candidate
    transformation here, instead of with ~candidate-transformer~
    even if this transformation is done every time the pattern is
    changed.  For example, if a candidate set is very large then
    ~candidate-transformer~ transforms every candidate while only
    some of them will actually be displayed due to the limit
    imposed by ~helm-candidate-number-limit~.

    Note that ~candidates~ and ~candidate-transformer~ is run
    already, so the given transformer function should also be able
    to handle candidates with (DISPLAY . REAL) format.

** nohighlight
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  t

- :documentation

    Disable highlighting matches in this source.
    This will disable generic highlighting of matches,
    but some specialized highlighting can be done from elsewhere,
    i.e from ~filtered-candidate-transformer~ or ~filter-one-by-one~ slots.
    So use this to either disable completely highlighting in your source,
    or to disable highlighting and use a specialized highlighting matches
    function for this source.
    Remember that this function should run AFTER all filter functions if those
    filter functions are modifying face properties, though it is possible to
    avoid this by using new ~add-face-text-property~ in your filter functions.

** persistent-action
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'ignore

- :documentation

    Can be a either a Function called with one parameter (the
    selected candidate) or a cons cell where first element is this
    same function and second element a symbol (e.g never-split)
    that inform ~helm-execute-persistent-action~ to not split his
    window to execute this persistent action.
    Example:

      (defun foo-persistent-action (candidate)
	 (do-something candidate))

      :persistent-action '(foo-persistent-action . never-split) ; Don't split
    or
      :persistent-action 'foo-persistent-action ; Split

    When specifying :persistent-action by slot directly, foo-persistent-action
    will be executed without quitting helm when hitting ~C-j~.

    Note that other persistent actions can be defined using other
    bindings than ~C-j~ by simply defining an interactive function bound
    to a key in the keymap source.
    The function should create a new attribute in source before calling
    ~helm-execute-persistent-action~ on this attribute.
    Example:

       (defun helm-ff-persistent-delete ()
	 "Delete current candidate without quitting."
	 (interactive)
	 (with-helm-alive-p
	   (helm-set-attr 'quick-delete '(helm-ff-quick-delete . never-split))
	   (helm-execute-persistent-action 'quick-delete)))

    This function is then bound in ~helm-find-files-map~.

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-source-sync))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-eshell-history-source

#+hcindex: helm-eshell-history-source

#+hcindex: helm-source-sync

- *parents* ::

  - [[*class: helm-source-sync]]

- *children* ::

This class has following slots

** init
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  (lambda nil (remove-hook 'minibuffer-setup-hook 'eshell-mode))

- :documentation

    Function called with no parameters when helm is started.
    It is useful for collecting current state information which can be
    used to create the list of candidates later.
    Initialization of ~candidates-in-buffer~ is done here
    with ~helm-init-candidates-in-buffer~.

** action
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  (lambda (candidate) (eshell-kill-input) (insert candidate))

- :documentation

    An alist of (DISPLAY . FUNCTION) pairs, a variable name  or a function.
    FUNCTION is called with one parameter: the selected candidate.

    An action other than the default can be chosen from this list
    of actions for the currently selected candidate (by default
    with TAB). The DISPLAY string is shown in the completions
    buffer and the FUNCTION is invoked when an action is
    selected. The first action of the list is the default.

    You should use ~helm-make-actions~ to build this alist easily.

** candidate-number-limit
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  9999

- :documentation

    Override ~helm-candidate-number-limit~ only for this source.

** candidates
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  (lambda nil (with-helm-current-buffer (cl-loop for c from 0 to (ring-length eshell-history-ring) for elm = (eshell-get-history c) unless (and (member elm lst) eshell-hist-ignoredups) collect elm into lst finally return lst)))

- :documentation

    Specifies how to retrieve candidates from the source.
    It can either be a variable name, a function called with no parameters
    or the actual list of candidates.

    Do NOT use this for asynchronous sources, use ~candidates-process~
    instead.

    The list must be a list whose members are strings, symbols
    or (DISPLAY . REAL) pairs.

    In case of (DISPLAY . REAL) pairs, the DISPLAY string is shown
    in the Helm buffer, but the REAL one is used as action
    argument when the candidate is selected. This allows a more
    readable presentation for candidates which would otherwise be,
    for example, too long or have a common part shared with other
    candidates which can be safely replaced with an abbreviated
    string for display purposes.

    Note that if the (DISPLAY . REAL) form is used then pattern
    matching is done on the displayed string, not on the real
    value.

    This function, generally should not compute candidates according to
    ~helm-pattern~ which defeat all the Helm's matching mechanism
    i.e. multiple pattern matching and/or fuzzy matching.
    If you want to do so, use :match-dynamic slot to be sure matching
    occur only in :candidates function and there is no conflict with
    other match functions.

** keymap
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  helm-eshell-history-map

- :documentation

    Specific keymap for this source.
    default value is ~helm-map~.

** multiline
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  t

- :documentation

    Allow multiline candidates.
    When non-nil candidates will be separated by ~helm-candidate-separator~.
    You can customize the color of this separator with ~helm-separator~ face.
    Value of multiline can be an integer which specify the maximum size of the
    multiline string to display, if multiline string is longer than this value
    it will be truncated.

** nomark
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  t

- :documentation

    Don't allow marking candidates when this attribute is present.

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-source-sync))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-fd-class

#+hcindex: helm-fd-class

#+hcindex: helm-source-async

- *parents* ::

  - [[*class: helm-source-async]]

- *children* ::

This class has following slots

** action
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-type-file-actions

- :documentation

    An alist of (DISPLAY . FUNCTION) pairs, a variable name  or a function.
    FUNCTION is called with one parameter: the selected candidate.

    An action other than the default can be chosen from this list
    of actions for the currently selected candidate (by default
    with TAB). The DISPLAY string is shown in the completions
    buffer and the FUNCTION is invoked when an action is
    selected. The first action of the list is the default.

    You should use ~helm-make-actions~ to build this alist easily.

** candidate-number-limit
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  20000

- :documentation

    Override ~helm-candidate-number-limit~ only for this source.

** candidates-process
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-fd-process

- :documentation

    This attribute is used to define a process as candidate.
    The function called with no arguments must return a process
    i.e. ~processp~, it use typically ~start-process~ or ~make-process~,
    see (info "(elisp) Asynchronous Processes").

    NOTE:
    When building the source at runtime you can give directly a process
    as value, otherwise wrap the process call into a function.
    The process buffer should be nil, otherwise, if you use
    ~helm-buffer~ give to the process a sentinel.

** filtered-candidate-transformer
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-fd-fct

- :documentation

    It has the same format as ~candidate-transformer~, except the
    function is called with two parameters: the candidate list and
    the source.

    This transformer is run on the candidate list which is already
    filtered by the current pattern. While ~candidate-transformer~
    is run only once, it is run every time the input pattern is
    changed.

    It can be used to transform the candidate list dynamically, for
    example, based on the current pattern.

    In some cases it may also be more efficent to perform candidate
    transformation here, instead of with ~candidate-transformer~
    even if this transformation is done every time the pattern is
    changed.  For example, if a candidate set is very large then
    ~candidate-transformer~ transforms every candidate while only
    some of them will actually be displayed due to the limit
    imposed by ~helm-candidate-number-limit~.

    Note that ~candidates~ and ~candidate-transformer~ is run
    already, so the given transformer function should also be able
    to handle candidates with (DISPLAY . REAL) format.

** help-message
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-fd-help-message

- :documentation

    Help message for this source.
    If not present, ~helm-help-message~ value will be used.

** keymap
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  helm-fd-map

- :documentation

    Specific keymap for this source.
    default value is ~helm-map~.

** nohighlight
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  t

- :documentation

    Disable highlighting matches in this source.
    This will disable generic highlighting of matches,
    but some specialized highlighting can be done from elsewhere,
    i.e from ~filtered-candidate-transformer~ or ~filter-one-by-one~ slots.
    So use this to either disable completely highlighting in your source,
    or to disable highlighting and use a specialized highlighting matches
    function for this source.
    Remember that this function should run AFTER all filter functions if those
    filter functions are modifying face properties, though it is possible to
    avoid this by using new ~add-face-text-property~ in your filter functions.

** requires-pattern
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  2

- :documentation

    If present matches from the source are shown only if the
    pattern is not empty. Optionally, it can have an integer
    parameter specifying the required length of input which is
    useful in case of sources with lots of candidates.

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-source-async))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-source-ffiles

#+hcindex: helm-source-ffiles

#+hcindex: helm-source-sync

- *parents* ::

  - [[*class: helm-source-sync]]

- *children* ::

This class has following slots

** init
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  (lambda nil (setq helm-ff-auto-update-flag helm-ff-auto-update-initial-value) (setq helm-ff--auto-update-state helm-ff-auto-update-flag) (helm-set-local-variable 'bookmark-make-record-function #'helm-ff-make-bookmark-record) (require 'helm-external))

- :documentation

    Function called with no parameters when helm is started.
    It is useful for collecting current state information which can be
    used to create the list of candidates later.
    Initialization of ~candidates-in-buffer~ is done here
    with ~helm-init-candidates-in-buffer~.

** action
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-find-files-actions

- :documentation

    An alist of (DISPLAY . FUNCTION) pairs, a variable name  or a function.
    FUNCTION is called with one parameter: the selected candidate.

    An action other than the default can be chosen from this list
    of actions for the currently selected candidate (by default
    with TAB). The DISPLAY string is shown in the completions
    buffer and the FUNCTION is invoked when an action is
    selected. The first action of the list is the default.

    You should use ~helm-make-actions~ to build this alist easily.

** action-transformer
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-find-files-action-transformer

- :documentation

    It's a function or a list of functions called with two
    arguments when the action list from the source is
    assembled. The first argument is the list of actions, the
    second is the current selection.  If it is a list of functions,
    it calls each function sequentially.

    The function should return a transformed action list.

    This can be used to customize the list of actions based on the
    currently selected candidate.

** after-init-hook
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-find-files-after-init-hook

- :documentation

    A local hook that run at end of initilization of this source.
    i.e After the creation of ~helm-buffer~.

    Should be a variable.
    Can be also an anonymous function or a list of functions
    directly added to slot, this is not recommended though.

** before-init-hook
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-find-files-before-init-hook

- :documentation

    A local hook that run at beginning of initilization of this source.
    i.e Before the creation of ~helm-buffer~.

    Should be a variable (defined with defvar).
    Can be also an anonymous function or a list of functions
    directly added to slot, this is not recommended though.

** candidate-number-limit
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-ff-candidate-number-limit

- :documentation

    Override ~helm-candidate-number-limit~ only for this source.

** candidates
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-find-files-get-candidates

- :documentation

    Specifies how to retrieve candidates from the source.
    It can either be a variable name, a function called with no parameters
    or the actual list of candidates.

    Do NOT use this for asynchronous sources, use ~candidates-process~
    instead.

    The list must be a list whose members are strings, symbols
    or (DISPLAY . REAL) pairs.

    In case of (DISPLAY . REAL) pairs, the DISPLAY string is shown
    in the Helm buffer, but the REAL one is used as action
    argument when the candidate is selected. This allows a more
    readable presentation for candidates which would otherwise be,
    for example, too long or have a common part shared with other
    candidates which can be safely replaced with an abbreviated
    string for display purposes.

    Note that if the (DISPLAY . REAL) form is used then pattern
    matching is done on the displayed string, not on the real
    value.

    This function, generally should not compute candidates according to
    ~helm-pattern~ which defeat all the Helm's matching mechanism
    i.e. multiple pattern matching and/or fuzzy matching.
    If you want to do so, use :match-dynamic slot to be sure matching
    occur only in :candidates function and there is no conflict with
    other match functions.

** cleanup
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-find-files-cleanup

- :documentation

    Function called with no parameters when *helm* buffer is
    closed. It is useful for killing unneeded candidates buffer.

    Note that the function is executed BEFORE performing action.

** filtered-candidate-transformer
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  '(helm-ff-fct helm-ff-directories-only helm-ff-files-only helm-ff-sort-candidates)

- :documentation

    It has the same format as ~candidate-transformer~, except the
    function is called with two parameters: the candidate list and
    the source.

    This transformer is run on the candidate list which is already
    filtered by the current pattern. While ~candidate-transformer~
    is run only once, it is run every time the input pattern is
    changed.

    It can be used to transform the candidate list dynamically, for
    example, based on the current pattern.

    In some cases it may also be more efficent to perform candidate
    transformation here, instead of with ~candidate-transformer~
    even if this transformation is done every time the pattern is
    changed.  For example, if a candidate set is very large then
    ~candidate-transformer~ transforms every candidate while only
    some of them will actually be displayed due to the limit
    imposed by ~helm-candidate-number-limit~.

    Note that ~candidates~ and ~candidate-transformer~ is run
    already, so the given transformer function should also be able
    to handle candidates with (DISPLAY . REAL) format.

** group
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-files

- :documentation

    The current source group, default to ~helm~ when not specified.

** header-name
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  (lambda (name) (concat name (substitute-command-keys helm-find-files-doc-header)))

- :documentation

    A function returning the display string of the header.
    Its argument is the name of the source. This attribute is useful to
    add an additional information with the source name.
    It doesn't modify the name of the source.

** help-message
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-ff-help-message

- :documentation

    Help message for this source.
    If not present, ~helm-help-message~ value will be used.

** keymap
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  helm-find-files-map

- :documentation

    Specific keymap for this source.
    default value is ~helm-map~.

** match-on-real
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  t

- :documentation

    Match the real value of candidates when non nil.

** migemo
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  t

- :documentation

    Enable migemo.
    When multimatch is disabled, you can give the symbol 'nomultimatch as value
    to force not using generic migemo matching function.
    In this case you have to provide your own migemo matching funtion
    that kick in when ~helm-migemo-mode~ is enabled.
    Otherwise it will be available for this source once ~helm-migemo-mode~
    is enabled when non-nil.

** mode-line
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  (list "File(s)" helm-mode-line-string)

- :documentation

    Source local ~helm-mode-line-string~ (included in
    ~mode-line-format~). It accepts also variable/function name.

** nohighlight
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  t

- :documentation

    Disable highlighting matches in this source.
    This will disable generic highlighting of matches,
    but some specialized highlighting can be done from elsewhere,
    i.e from ~filtered-candidate-transformer~ or ~filter-one-by-one~ slots.
    So use this to either disable completely highlighting in your source,
    or to disable highlighting and use a specialized highlighting matches
    function for this source.
    Remember that this function should run AFTER all filter functions if those
    filter functions are modifying face properties, though it is possible to
    avoid this by using new ~add-face-text-property~ in your filter functions.

** persistent-action-if
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-find-files-persistent-action-if

- :documentation

    Similar from persistent action but it is a function that should
    return an object suitable for persistent action when called , i.e. a
    function or a cons cell.
    Example:

       (defun foo-persistent-action (candidate)
	 (cond (something
		;; Don't split helm-window.
		(cons (lambda (_ignore)
			(do-something candidate))
		      'no-split))
	       ;; Split helm-window.
	       (something-else
		(lambda (_ignore)
		  (do-something-else candidate)))))

       :persistent-action-if 'foo-persistent-action

    Here when hitting ~C-j~ one of the lambda's will be executed
    depending on something or something-else condition, splitting or not
    splitting as needed.
    See ~helm-find-files-persistent-action-if~ definition as another example.

** persistent-help
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  "Hit1 Expand Candidate, Hit2 or (C-u) Find file"

- :documentation

    A string to explain persistent-action of this source. It also
    accepts a function or a variable name.
    It will be displayed in ~header-line~ or in ~minibuffer~ depending
    of value of ~helm-echo-input-in-header-line~ and ~helm-display-header-line~.

** update
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  (lambda nil (remhash helm-ff-default-directory helm-ff--list-directory-cache))

- :documentation

    Function called with no parameters at before "init" function
    when ~helm-force-update~ is called.

** volatile
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  t

- :documentation

    Indicates the source assembles the candidate list dynamically,
    so it shouldn't be cached within a single Helm
    invocation. It is only applicable to synchronous sources,
    because asynchronous sources are not cached.

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-source-sync))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-browse-project-override-inheritor

#+hcindex: helm-browse-project-override-inheritor

#+hcindex: helm-type-file

#+hcindex: helm-browse-project-source

- *parents* ::

  - [[*class: helm-type-file]]

- *children* ::

  - [[*class: helm-browse-project-source]]

This class has following slots

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm-source-get-action-from-type~:

 ((object helm-type-file))

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-type-file))
 :before ((source helm-type-file))
 :after ((source helm-browse-project-override-inheritor))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-browse-project-source

#+hcindex: helm-browse-project-source

#+hcindex: helm-source-in-buffer

#+hcindex: helm-browse-project-override-inheritor

- *parents* ::

  - [[*class: helm-source-in-buffer]]

  - [[*class: helm-browse-project-override-inheritor]]

- *children* ::

This class has following slots

** init
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-default-init-source-in-buffer-function

- :documentation

    Function called with no parameters when helm is started.
    It is useful for collecting current state information which can be
    used to create the list of candidates later.
    Initialization of ~candidates-in-buffer~ is done here
    with ~helm-init-candidates-in-buffer~.

** candidates
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-candidates-in-buffer

- :documentation

    Specifies how to retrieve candidates from the source.
    It can either be a variable name, a function called with no parameters
    or the actual list of candidates.

    Do NOT use this for asynchronous sources, use ~candidates-process~
    instead.

    The list must be a list whose members are strings, symbols
    or (DISPLAY . REAL) pairs.

    In case of (DISPLAY . REAL) pairs, the DISPLAY string is shown
    in the Helm buffer, but the REAL one is used as action
    argument when the candidate is selected. This allows a more
    readable presentation for candidates which would otherwise be,
    for example, too long or have a common part shared with other
    candidates which can be safely replaced with an abbreviated
    string for display purposes.

    Note that if the (DISPLAY . REAL) form is used then pattern
    matching is done on the displayed string, not on the real
    value.

    This function, generally should not compute candidates according to
    ~helm-pattern~ which defeat all the Helm's matching mechanism
    i.e. multiple pattern matching and/or fuzzy matching.
    If you want to do so, use :match-dynamic slot to be sure matching
    occur only in :candidates function and there is no conflict with
    other match functions.

** data
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    A string, a list or a buffer that will be used to feed the ~helm-candidates-buffer~.
    This data will be passed in a function added to the init slot and
    the buffer will be build with ~helm-init-candidates-in-buffer~ or directly
    with ~helm-candidates-buffer~ if data is a buffer.
    This is an easy and fast method to build a ~candidates-in-buffer~ source.

** filter-one-by-one
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  (lambda (c) (if (with-helm-buffer helm-ff-transformer-show-only-basename) (cons (propertize (helm-basename c) 'face 'helm-ff-file) c) (propertize c 'face 'helm-ff-file)))

- :documentation

    A transformer function that treat candidates one by one.
    It is called with one arg the candidate.
    It is faster than ~filtered-candidate-transformer~ or
    ~candidate-transformer~, but should be used only in sources
    that recompute constantly their candidates, e.g ~helm-source-find-files~.
    Filtering happen early and candidates are treated
    one by one instead of re-looping on the whole list.
    If used with ~filtered-candidate-transformer~ or ~candidate-transformer~
    these functions should treat the candidates transformed by the
    ~filter-one-by-one~ function in consequence.

** get-line
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'buffer-substring-no-properties

- :documentation

    A function like ~buffer-substring-no-properties~ or ~buffer-substring~.
    This function converts region from point at line-beginning and point
    at line-end in the ~helm-candidate-buffer~ to a string which will be displayed
    in the ~helm-buffer~, it takes two args BEG and END.
    By default, ~helm-candidates-in-buffer~ uses
    ~buffer-substring-no-properties~ which does no conversion and doesn't carry
    text properties.

** match
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  '(identity)

- :documentation

    List of functions called with one parameter: a candidate. The
    function should return non-nil if the candidate matches the
    current pattern (see variable ~helm-pattern~).

    When using ~candidates-in-buffer~ its default value is ~identity~ and
    don't have to be changed, use the ~search~ slot instead.

    This attribute allows the source to override the default
    pattern matching based on ~string-match~. It can be used, for
    example, to implement a source for file names and do the
    pattern matching on the basename of files, since it's more
    likely one is typing part of the basename when searching for a
    file, instead of some string anywhere else in its path.

    If the list contains more than one function then the list of
    matching candidates from the source is constructed by appending
    the results after invoking the first function on all the
    potential candidates, then the next function, and so on. The
    matching candidates supplied by the first function appear first
    in the list of results and then results from the other
    functions, respectively.

    This attribute has no effect for asynchronous sources (see
    attribute ~candidates~), and sources using ~match-dynamic~
    since they perform pattern matching themselves.

    Note that FUZZY-MATCH slot will overhide value of this slot.

** match-part
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  (lambda (c) (if (with-helm-buffer helm-ff-transformer-show-only-basename) (helm-basename c) c))

- :documentation

    Allow matching only one part of candidate.
    If source contain match-part attribute, match is computed only
    on part of candidate returned by the call of function provided
    by this attribute. The function should have one arg, candidate,
    and return only a specific part of candidate.
    On async sources, as matching is done by the backend, this have
    no effect apart for highlighting matches.

** migemo
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Enable migemo.
    When multimatch is disabled, you can give the symbol 'nomultimatch as value
    to force not using generic migemo matching function.
    In this case you have to provide your own migemo matching funtion
    that kick in when ~helm-migemo-mode~ is enabled.
    Otherwise it will be available for this source once ~helm-migemo-mode~
    is enabled when non-nil.

** root-dir
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

** search
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  '(helm-candidates-in-buffer-search-default-fn)

- :documentation

    List of functions like ~re-search-forward~ or ~search-forward~.
    Buffer search function used by ~helm-candidates-in-buffer~.
    By default, ~helm-candidates-in-buffer~ uses ~re-search-forward~.
    The function should take one arg PATTERN.
    If your search function needs to handle negation like multimatch,
    this function should returns in such case a cons cell of two integers defining
    the beg and end positions to match in the line previously matched by
    ~re-search-forward~ or similar, and move point to next line
    (See how the ~helm-mm-3-search-base~ and ~helm-fuzzy-search~ functions are working).

    NOTE: FUZZY-MATCH slot will overhide value of this slot.

** search-strict
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    When specifying a search function within a source and
    helm-multi-match is enabled, the result of all searching
    functions will be concatened, which in some cases is not what
    is wanted. When using ~search-strict~ only this or these
    functions will be used. You can specify those functions as a
    list of functions or a single symbol function.

    NOTE: This have the same effect as using a nil value for
	  :MULTIMATCH slot.

** volatile
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  t

- :documentation

    Indicates the source assembles the candidate list dynamically,
    so it shouldn't be cached within a single Helm
    invocation. It is only applicable to synchronous sources,
    because asynchronous sources are not cached.

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm-source-get-action-from-type~:

 ((object helm-type-file))

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-source-in-buffer))
 ((source helm-type-file))
 :before ((source helm-type-file))
 :after ((source helm-browse-project-override-inheritor))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-file-cache

#+hcindex: helm-file-cache

#+hcindex: helm-source-in-buffer

#+hcindex: helm-type-file

- *parents* ::

  - [[*class: helm-source-in-buffer]]

  - [[*class: helm-type-file]]

- *children* ::

This class has following slots

** init
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  (lambda nil (require 'filecache))

- :documentation

    Function called with no parameters when helm is started.
    It is useful for collecting current state information which can be
    used to create the list of candidates later.
    Initialization of ~candidates-in-buffer~ is done here
    with ~helm-init-candidates-in-buffer~.

** candidates
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-candidates-in-buffer

- :documentation

    Specifies how to retrieve candidates from the source.
    It can either be a variable name, a function called with no parameters
    or the actual list of candidates.

    Do NOT use this for asynchronous sources, use ~candidates-process~
    instead.

    The list must be a list whose members are strings, symbols
    or (DISPLAY . REAL) pairs.

    In case of (DISPLAY . REAL) pairs, the DISPLAY string is shown
    in the Helm buffer, but the REAL one is used as action
    argument when the candidate is selected. This allows a more
    readable presentation for candidates which would otherwise be,
    for example, too long or have a common part shared with other
    candidates which can be safely replaced with an abbreviated
    string for display purposes.

    Note that if the (DISPLAY . REAL) form is used then pattern
    matching is done on the displayed string, not on the real
    value.

    This function, generally should not compute candidates according to
    ~helm-pattern~ which defeat all the Helm's matching mechanism
    i.e. multiple pattern matching and/or fuzzy matching.
    If you want to do so, use :match-dynamic slot to be sure matching
    occur only in :candidates function and there is no conflict with
    other match functions.

** data
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    A string, a list or a buffer that will be used to feed the ~helm-candidates-buffer~.
    This data will be passed in a function added to the init slot and
    the buffer will be build with ~helm-init-candidates-in-buffer~ or directly
    with ~helm-candidates-buffer~ if data is a buffer.
    This is an easy and fast method to build a ~candidates-in-buffer~ source.

** get-line
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'buffer-substring-no-properties

- :documentation

    A function like ~buffer-substring-no-properties~ or ~buffer-substring~.
    This function converts region from point at line-beginning and point
    at line-end in the ~helm-candidate-buffer~ to a string which will be displayed
    in the ~helm-buffer~, it takes two args BEG and END.
    By default, ~helm-candidates-in-buffer~ uses
    ~buffer-substring-no-properties~ which does no conversion and doesn't carry
    text properties.

** match
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  '(identity)

- :documentation

    List of functions called with one parameter: a candidate. The
    function should return non-nil if the candidate matches the
    current pattern (see variable ~helm-pattern~).

    When using ~candidates-in-buffer~ its default value is ~identity~ and
    don't have to be changed, use the ~search~ slot instead.

    This attribute allows the source to override the default
    pattern matching based on ~string-match~. It can be used, for
    example, to implement a source for file names and do the
    pattern matching on the basename of files, since it's more
    likely one is typing part of the basename when searching for a
    file, instead of some string anywhere else in its path.

    If the list contains more than one function then the list of
    matching candidates from the source is constructed by appending
    the results after invoking the first function on all the
    potential candidates, then the next function, and so on. The
    matching candidates supplied by the first function appear first
    in the list of results and then results from the other
    functions, respectively.

    This attribute has no effect for asynchronous sources (see
    attribute ~candidates~), and sources using ~match-dynamic~
    since they perform pattern matching themselves.

    Note that FUZZY-MATCH slot will overhide value of this slot.

** migemo
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Enable migemo.
    When multimatch is disabled, you can give the symbol 'nomultimatch as value
    to force not using generic migemo matching function.
    In this case you have to provide your own migemo matching funtion
    that kick in when ~helm-migemo-mode~ is enabled.
    Otherwise it will be available for this source once ~helm-migemo-mode~
    is enabled when non-nil.

** search
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  '(helm-candidates-in-buffer-search-default-fn)

- :documentation

    List of functions like ~re-search-forward~ or ~search-forward~.
    Buffer search function used by ~helm-candidates-in-buffer~.
    By default, ~helm-candidates-in-buffer~ uses ~re-search-forward~.
    The function should take one arg PATTERN.
    If your search function needs to handle negation like multimatch,
    this function should returns in such case a cons cell of two integers defining
    the beg and end positions to match in the line previously matched by
    ~re-search-forward~ or similar, and move point to next line
    (See how the ~helm-mm-3-search-base~ and ~helm-fuzzy-search~ functions are working).

    NOTE: FUZZY-MATCH slot will overhide value of this slot.

** search-strict
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    When specifying a search function within a source and
    helm-multi-match is enabled, the result of all searching
    functions will be concatened, which in some cases is not what
    is wanted. When using ~search-strict~ only this or these
    functions will be used. You can specify those functions as a
    list of functions or a single symbol function.

    NOTE: This have the same effect as using a nil value for
	  :MULTIMATCH slot.

** volatile
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  t

- :documentation

    Indicates the source assembles the candidate list dynamically,
    so it shouldn't be cached within a single Helm
    invocation. It is only applicable to synchronous sources,
    because asynchronous sources are not cached.

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm-source-get-action-from-type~:

 ((object helm-type-file))

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-source-in-buffer))
 ((source helm-type-file))
 :before ((source helm-type-file))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-recentf-source

#+hcindex: helm-recentf-source

#+hcindex: helm-source-sync

#+hcindex: helm-type-file

- *parents* ::

  - [[*class: helm-source-sync]]

  - [[*class: helm-type-file]]

- *children* ::

This class has following slots

** init
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  (lambda nil (require 'recentf) (when helm-turn-on-recentf (recentf-mode 1)))

- :documentation

    Function called with no parameters when helm is started.
    It is useful for collecting current state information which can be
    used to create the list of candidates later.
    Initialization of ~candidates-in-buffer~ is done here
    with ~helm-init-candidates-in-buffer~.

** candidates
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  (lambda nil recentf-list)

- :documentation

    Specifies how to retrieve candidates from the source.
    It can either be a variable name, a function called with no parameters
    or the actual list of candidates.

    Do NOT use this for asynchronous sources, use ~candidates-process~
    instead.

    The list must be a list whose members are strings, symbols
    or (DISPLAY . REAL) pairs.

    In case of (DISPLAY . REAL) pairs, the DISPLAY string is shown
    in the Helm buffer, but the REAL one is used as action
    argument when the candidate is selected. This allows a more
    readable presentation for candidates which would otherwise be,
    for example, too long or have a common part shared with other
    candidates which can be safely replaced with an abbreviated
    string for display purposes.

    Note that if the (DISPLAY . REAL) form is used then pattern
    matching is done on the displayed string, not on the real
    value.

    This function, generally should not compute candidates according to
    ~helm-pattern~ which defeat all the Helm's matching mechanism
    i.e. multiple pattern matching and/or fuzzy matching.
    If you want to do so, use :match-dynamic slot to be sure matching
    occur only in :candidates function and there is no conflict with
    other match functions.

** match-dynamic
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Disable all helm matching functions when non nil.
    The :candidates function in this case is in charge of fetching
    candidates dynamically according to ~helm-pattern~.
    Note that :volatile is automatically enabled when using this, so no
    need to specify it.

** match-part
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  (lambda (candidate) (if (or helm-ff-transformer-show-only-basename helm-recentf--basename-flag) (helm-basename candidate) candidate))

- :documentation

    Allow matching only one part of candidate.
    If source contain match-part attribute, match is computed only
    on part of candidate returned by the call of function provided
    by this attribute. The function should have one arg, candidate,
    and return only a specific part of candidate.
    On async sources, as matching is done by the backend, this have
    no effect apart for highlighting matches.

** match-strict
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    When specifying a match function within a source and
    helm-multi-match is enabled, the result of all matching
    functions will be concatened, which in some cases is not what
    is wanted. When using ~match-strict~ only this or these
    functions will be used. You can specify those functions as a
    list of functions or a single symbol function.

    NOTE: This have the same effect as using :MULTIMATCH nil.

** migemo
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  t

- :documentation

    Enable migemo.
    When multimatch is disabled, you can give the symbol 'nomultimatch as value
    to force not using generic migemo matching function.
    In this case you have to provide your own migemo matching funtion
    that kick in when ~helm-migemo-mode~ is enabled.
    Otherwise it will be available for this source once ~helm-migemo-mode~
    is enabled when non-nil.

** pattern-transformer
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-recentf-pattern-transformer

- :documentation

    It's a function or a list of functions called with one argument
    before computing matches. Its argument is ~helm-pattern~.
    Functions should return transformed ~helm-pattern~.

    It is useful to change interpretation of ~helm-pattern~.

** persistent-action
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-ff-kill-or-find-buffer-fname

- :documentation

    Can be a either a Function called with one parameter (the
    selected candidate) or a cons cell where first element is this
    same function and second element a symbol (e.g never-split)
    that inform ~helm-execute-persistent-action~ to not split his
    window to execute this persistent action.
    Example:

      (defun foo-persistent-action (candidate)
	 (do-something candidate))

      :persistent-action '(foo-persistent-action . never-split) ; Don't split
    or
      :persistent-action 'foo-persistent-action ; Split

    When specifying :persistent-action by slot directly, foo-persistent-action
    will be executed without quitting helm when hitting ~C-j~.

    Note that other persistent actions can be defined using other
    bindings than ~C-j~ by simply defining an interactive function bound
    to a key in the keymap source.
    The function should create a new attribute in source before calling
    ~helm-execute-persistent-action~ on this attribute.
    Example:

       (defun helm-ff-persistent-delete ()
	 "Delete current candidate without quitting."
	 (interactive)
	 (with-helm-alive-p
	   (helm-set-attr 'quick-delete '(helm-ff-quick-delete . never-split))
	   (helm-execute-persistent-action 'quick-delete)))

    This function is then bound in ~helm-find-files-map~.

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm-source-get-action-from-type~:

 ((object helm-type-file))

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-source-sync))
 ((source helm-type-file))
 :before ((source helm-type-file))
 :after ((source helm-recentf-source))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-files-in-current-dir-source

#+hcindex: helm-files-in-current-dir-source

#+hcindex: helm-source-sync

#+hcindex: helm-type-file

- *parents* ::

  - [[*class: helm-source-sync]]

  - [[*class: helm-type-file]]

- *children* ::

This class has following slots

** candidates
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  (lambda nil (with-helm-current-buffer (let ((dir (helm-current-directory))) (when (file-accessible-directory-p dir) (directory-files dir t)))))

- :documentation

    Specifies how to retrieve candidates from the source.
    It can either be a variable name, a function called with no parameters
    or the actual list of candidates.

    Do NOT use this for asynchronous sources, use ~candidates-process~
    instead.

    The list must be a list whose members are strings, symbols
    or (DISPLAY . REAL) pairs.

    In case of (DISPLAY . REAL) pairs, the DISPLAY string is shown
    in the Helm buffer, but the REAL one is used as action
    argument when the candidate is selected. This allows a more
    readable presentation for candidates which would otherwise be,
    for example, too long or have a common part shared with other
    candidates which can be safely replaced with an abbreviated
    string for display purposes.

    Note that if the (DISPLAY . REAL) form is used then pattern
    matching is done on the displayed string, not on the real
    value.

    This function, generally should not compute candidates according to
    ~helm-pattern~ which defeat all the Helm's matching mechanism
    i.e. multiple pattern matching and/or fuzzy matching.
    If you want to do so, use :match-dynamic slot to be sure matching
    occur only in :candidates function and there is no conflict with
    other match functions.

** fuzzy-match
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  t

- :documentation

    Enable fuzzy matching in this source.
    This will overwrite settings in MATCH slot, and for
    sources built with child class ~helm-source-in-buffer~ the SEARCH slot.
    This is an easy way of enabling fuzzy matching, but you can use the MATCH
    or SEARCH slots yourself if you want something more elaborated, mixing
    different type of match (See ~helm-source-buffers~ class for example).

    This attribute is not supported for asynchronous sources
    since they perform pattern matching themselves.

** match-dynamic
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Disable all helm matching functions when non nil.
    The :candidates function in this case is in charge of fetching
    candidates dynamically according to ~helm-pattern~.
    Note that :volatile is automatically enabled when using this, so no
    need to specify it.

** match-part
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  (lambda (candidate) (if (or helm-ff-transformer-show-only-basename helm-recentf--basename-flag) (helm-basename candidate) candidate))

- :documentation

    Allow matching only one part of candidate.
    If source contain match-part attribute, match is computed only
    on part of candidate returned by the call of function provided
    by this attribute. The function should have one arg, candidate,
    and return only a specific part of candidate.
    On async sources, as matching is done by the backend, this have
    no effect apart for highlighting matches.

** match-strict
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    When specifying a match function within a source and
    helm-multi-match is enabled, the result of all matching
    functions will be concatened, which in some cases is not what
    is wanted. When using ~match-strict~ only this or these
    functions will be used. You can specify those functions as a
    list of functions or a single symbol function.

    NOTE: This have the same effect as using :MULTIMATCH nil.

** migemo
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  t

- :documentation

    Enable migemo.
    When multimatch is disabled, you can give the symbol 'nomultimatch as value
    to force not using generic migemo matching function.
    In this case you have to provide your own migemo matching funtion
    that kick in when ~helm-migemo-mode~ is enabled.
    Otherwise it will be available for this source once ~helm-migemo-mode~
    is enabled when non-nil.

** pattern-transformer
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-recentf-pattern-transformer

- :documentation

    It's a function or a list of functions called with one argument
    before computing matches. Its argument is ~helm-pattern~.
    Functions should return transformed ~helm-pattern~.

    It is useful to change interpretation of ~helm-pattern~.

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm-source-get-action-from-type~:

 ((object helm-type-file))

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-source-sync))
 ((source helm-type-file))
 :before ((source helm-type-file))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-grep-class

#+hcindex: helm-grep-class

#+hcindex: helm-source-async

- *parents* ::

  - [[*class: helm-source-async]]

- *children* ::

This class has following slots

** action
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-grep-actions

- :documentation

    An alist of (DISPLAY . FUNCTION) pairs, a variable name  or a function.
    FUNCTION is called with one parameter: the selected candidate.

    An action other than the default can be chosen from this list
    of actions for the currently selected candidate (by default
    with TAB). The DISPLAY string is shown in the completions
    buffer and the FUNCTION is invoked when an action is
    selected. The first action of the list is the default.

    You should use ~helm-make-actions~ to build this alist easily.

** after-init-hook
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-grep-after-init-hook

- :documentation

    A local hook that run at end of initilization of this source.
    i.e After the creation of ~helm-buffer~.

    Should be a variable.
    Can be also an anonymous function or a list of functions
    directly added to slot, this is not recommended though.

** backend
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    The grep backend that will be used.
    It is actually used only as an internal flag
    and doesn't set the backend by itself.
    You probably don't want to modify this.

** before-init-hook
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-grep-before-init-hook

- :documentation

    A local hook that run at beginning of initilization of this source.
    i.e Before the creation of ~helm-buffer~.

    Should be a variable (defined with defvar).
    Can be also an anonymous function or a list of functions
    directly added to slot, this is not recommended though.

** candidate-number-limit
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  9999

- :documentation

    Override ~helm-candidate-number-limit~ only for this source.

** candidates-process
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-grep-collect-candidates

- :documentation

    This attribute is used to define a process as candidate.
    The function called with no arguments must return a process
    i.e. ~processp~, it use typically ~start-process~ or ~make-process~,
    see (info "(elisp) Asynchronous Processes").

    NOTE:
    When building the source at runtime you can give directly a process
    as value, otherwise wrap the process call into a function.
    The process buffer should be nil, otherwise, if you use
    ~helm-buffer~ give to the process a sentinel.

** filtered-candidate-transformer
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  #'helm-grep-fc-transformer

- :documentation

    It has the same format as ~candidate-transformer~, except the
    function is called with two parameters: the candidate list and
    the source.

    This transformer is run on the candidate list which is already
    filtered by the current pattern. While ~candidate-transformer~
    is run only once, it is run every time the input pattern is
    changed.

    It can be used to transform the candidate list dynamically, for
    example, based on the current pattern.

    In some cases it may also be more efficent to perform candidate
    transformation here, instead of with ~candidate-transformer~
    even if this transformation is done every time the pattern is
    changed.  For example, if a candidate set is very large then
    ~candidate-transformer~ transforms every candidate while only
    some of them will actually be displayed due to the limit
    imposed by ~helm-candidate-number-limit~.

    Note that ~candidates~ and ~candidate-transformer~ is run
    already, so the given transformer function should also be able
    to handle candidates with (DISPLAY . REAL) format.

** group
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-grep

- :documentation

    The current source group, default to ~helm~ when not specified.

** help-message
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-grep-help-message

- :documentation

    Help message for this source.
    If not present, ~helm-help-message~ value will be used.

** history
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-grep-history

- :documentation

    Allow passing history variable to helm from source.
    It should be a quoted symbol.
    Passing the history variable here have no effect
    so add it also in the ~helm~ call with the :history keyword.
    The main point of adding the variable here
    is to make it available when resuming.

** keymap
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  helm-grep-map

- :documentation

    Specific keymap for this source.
    default value is ~helm-map~.

** nohighlight
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  t

- :documentation

    Disable highlighting matches in this source.
    This will disable generic highlighting of matches,
    but some specialized highlighting can be done from elsewhere,
    i.e from ~filtered-candidate-transformer~ or ~filter-one-by-one~ slots.
    So use this to either disable completely highlighting in your source,
    or to disable highlighting and use a specialized highlighting matches
    function for this source.
    Remember that this function should run AFTER all filter functions if those
    filter functions are modifying face properties, though it is possible to
    avoid this by using new ~add-face-text-property~ in your filter functions.

** nomark
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  t

- :documentation

    Don't allow marking candidates when this attribute is present.

** pcre
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Backend is using pcre regexp engine when non-nil.

** persistent-action
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-grep-persistent-action

- :documentation

    Can be a either a Function called with one parameter (the
    selected candidate) or a cons cell where first element is this
    same function and second element a symbol (e.g never-split)
    that inform ~helm-execute-persistent-action~ to not split his
    window to execute this persistent action.
    Example:

      (defun foo-persistent-action (candidate)
	 (do-something candidate))

      :persistent-action '(foo-persistent-action . never-split) ; Don't split
    or
      :persistent-action 'foo-persistent-action ; Split

    When specifying :persistent-action by slot directly, foo-persistent-action
    will be executed without quitting helm when hitting ~C-j~.

    Note that other persistent actions can be defined using other
    bindings than ~C-j~ by simply defining an interactive function bound
    to a key in the keymap source.
    The function should create a new attribute in source before calling
    ~helm-execute-persistent-action~ on this attribute.
    Example:

       (defun helm-ff-persistent-delete ()
	 "Delete current candidate without quitting."
	 (interactive)
	 (with-helm-alive-p
	   (helm-set-attr 'quick-delete '(helm-ff-quick-delete . never-split))
	   (helm-execute-persistent-action 'quick-delete)))

    This function is then bound in ~helm-find-files-map~.

** persistent-help
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  "Jump to line (~C-u~ Record in mark ring)"

- :documentation

    A string to explain persistent-action of this source. It also
    accepts a function or a variable name.
    It will be displayed in ~header-line~ or in ~minibuffer~ depending
    of value of ~helm-echo-input-in-header-line~ and ~helm-display-header-line~.

** requires-pattern
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  2

- :documentation

    If present matches from the source are shown only if the
    pattern is not empty. Optionally, it can have an integer
    parameter specifying the required length of input which is
    useful in case of sources with lots of candidates.

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-source-async))
 ((source helm-grep-class))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-grep-ag-class

#+hcindex: helm-grep-ag-class

#+hcindex: helm-source-async

- *parents* ::

  - [[*class: helm-source-async]]

- *children* ::

This class has following slots

** action
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-grep-actions

- :documentation

    An alist of (DISPLAY . FUNCTION) pairs, a variable name  or a function.
    FUNCTION is called with one parameter: the selected candidate.

    An action other than the default can be chosen from this list
    of actions for the currently selected candidate (by default
    with TAB). The DISPLAY string is shown in the completions
    buffer and the FUNCTION is invoked when an action is
    selected. The first action of the list is the default.

    You should use ~helm-make-actions~ to build this alist easily.

** candidate-number-limit
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  99999

- :documentation

    Override ~helm-candidate-number-limit~ only for this source.

** filtered-candidate-transformer
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  #'helm-grep-fc-transformer

- :documentation

    It has the same format as ~candidate-transformer~, except the
    function is called with two parameters: the candidate list and
    the source.

    This transformer is run on the candidate list which is already
    filtered by the current pattern. While ~candidate-transformer~
    is run only once, it is run every time the input pattern is
    changed.

    It can be used to transform the candidate list dynamically, for
    example, based on the current pattern.

    In some cases it may also be more efficent to perform candidate
    transformation here, instead of with ~candidate-transformer~
    even if this transformation is done every time the pattern is
    changed.  For example, if a candidate set is very large then
    ~candidate-transformer~ transforms every candidate while only
    some of them will actually be displayed due to the limit
    imposed by ~helm-candidate-number-limit~.

    Note that ~candidates~ and ~candidate-transformer~ is run
    already, so the given transformer function should also be able
    to handle candidates with (DISPLAY . REAL) format.

** group
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-grep

- :documentation

    The current source group, default to ~helm~ when not specified.

** help-message
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-grep-help-message

- :documentation

    Help message for this source.
    If not present, ~helm-help-message~ value will be used.

** history
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-grep-ag-history

- :documentation

    Allow passing history variable to helm from source.
    It should be a quoted symbol.
    Passing the history variable here have no effect
    so add it also in the ~helm~ call with the :history keyword.
    The main point of adding the variable here
    is to make it available when resuming.

** keymap
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  helm-grep-map

- :documentation

    Specific keymap for this source.
    default value is ~helm-map~.

** nohighlight
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  t

- :documentation

    Disable highlighting matches in this source.
    This will disable generic highlighting of matches,
    but some specialized highlighting can be done from elsewhere,
    i.e from ~filtered-candidate-transformer~ or ~filter-one-by-one~ slots.
    So use this to either disable completely highlighting in your source,
    or to disable highlighting and use a specialized highlighting matches
    function for this source.
    Remember that this function should run AFTER all filter functions if those
    filter functions are modifying face properties, though it is possible to
    avoid this by using new ~add-face-text-property~ in your filter functions.

** nomark
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  t

- :documentation

    Don't allow marking candidates when this attribute is present.

** pcre
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  t

- :documentation

    Backend is using pcre regexp engine when non--nil.

** persistent-action
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-grep-persistent-action

- :documentation

    Can be a either a Function called with one parameter (the
    selected candidate) or a cons cell where first element is this
    same function and second element a symbol (e.g never-split)
    that inform ~helm-execute-persistent-action~ to not split his
    window to execute this persistent action.
    Example:

      (defun foo-persistent-action (candidate)
	 (do-something candidate))

      :persistent-action '(foo-persistent-action . never-split) ; Don't split
    or
      :persistent-action 'foo-persistent-action ; Split

    When specifying :persistent-action by slot directly, foo-persistent-action
    will be executed without quitting helm when hitting ~C-j~.

    Note that other persistent actions can be defined using other
    bindings than ~C-j~ by simply defining an interactive function bound
    to a key in the keymap source.
    The function should create a new attribute in source before calling
    ~helm-execute-persistent-action~ on this attribute.
    Example:

       (defun helm-ff-persistent-delete ()
	 "Delete current candidate without quitting."
	 (interactive)
	 (with-helm-alive-p
	   (helm-set-attr 'quick-delete '(helm-ff-quick-delete . never-split))
	   (helm-execute-persistent-action 'quick-delete)))

    This function is then bound in ~helm-find-files-map~.

** persistent-help
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  "Jump to line (~C-u~ Record in mark ring)"

- :documentation

    A string to explain persistent-action of this source. It also
    accepts a function or a variable name.
    It will be displayed in ~header-line~ or in ~minibuffer~ depending
    of value of ~helm-echo-input-in-header-line~ and ~helm-display-header-line~.

** requires-pattern
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  2

- :documentation

    If present matches from the source are shown only if the
    pattern is not empty. Optionally, it can have an integer
    parameter specifying the required length of input which is
    useful in case of sources with lots of candidates.

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-source-async))
 ((source helm-grep-ag-class))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-gid-source

#+hcindex: helm-gid-source

#+hcindex: helm-source-async

- *parents* ::

  - [[*class: helm-source-async]]

- *children* ::

This class has following slots

** action
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  (helm-make-actions "Find File" 'helm-grep-action "Find file other frame" 'helm-grep-other-frame "Save results in grep buffer" 'helm-grep-save-results "Find file other window" 'helm-grep-other-window)

- :documentation

    An alist of (DISPLAY . FUNCTION) pairs, a variable name  or a function.
    FUNCTION is called with one parameter: the selected candidate.

    An action other than the default can be chosen from this list
    of actions for the currently selected candidate (by default
    with TAB). The DISPLAY string is shown in the completions
    buffer and the FUNCTION is invoked when an action is
    selected. The first action of the list is the default.

    You should use ~helm-make-actions~ to build this alist easily.

** candidate-number-limit
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  99999

- :documentation

    Override ~helm-candidate-number-limit~ only for this source.

** candidates-process
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  #'helm-gid-candidates-process

- :documentation

    This attribute is used to define a process as candidate.
    The function called with no arguments must return a process
    i.e. ~processp~, it use typically ~start-process~ or ~make-process~,
    see (info "(elisp) Asynchronous Processes").

    NOTE:
    When building the source at runtime you can give directly a process
    as value, otherwise wrap the process call into a function.
    The process buffer should be nil, otherwise, if you use
    ~helm-buffer~ give to the process a sentinel.

** db-dir
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

   Location of ID file.

** filtered-candidate-transformer
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  #'helm-gid-filtered-candidate-transformer

- :documentation

    It has the same format as ~candidate-transformer~, except the
    function is called with two parameters: the candidate list and
    the source.

    This transformer is run on the candidate list which is already
    filtered by the current pattern. While ~candidate-transformer~
    is run only once, it is run every time the input pattern is
    changed.

    It can be used to transform the candidate list dynamically, for
    example, based on the current pattern.

    In some cases it may also be more efficent to perform candidate
    transformation here, instead of with ~candidate-transformer~
    even if this transformation is done every time the pattern is
    changed.  For example, if a candidate set is very large then
    ~candidate-transformer~ transforms every candidate while only
    some of them will actually be displayed due to the limit
    imposed by ~helm-candidate-number-limit~.

    Note that ~candidates~ and ~candidate-transformer~ is run
    already, so the given transformer function should also be able
    to handle candidates with (DISPLAY . REAL) format.

** header-name
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  (lambda (name) (concat name " [" (helm-get-attr 'db-dir) "]"))

- :documentation

    A function returning the display string of the header.
    Its argument is the name of the source. This attribute is useful to
    add an additional information with the source name.
    It doesn't modify the name of the source.

** help-message
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-grep-help-message

- :documentation

    Help message for this source.
    If not present, ~helm-help-message~ value will be used.

** history
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-grep-history

- :documentation

    Allow passing history variable to helm from source.
    It should be a quoted symbol.
    Passing the history variable here have no effect
    so add it also in the ~helm~ call with the :history keyword.
    The main point of adding the variable here
    is to make it available when resuming.

** nohighlight
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  t

- :documentation

    Disable highlighting matches in this source.
    This will disable generic highlighting of matches,
    but some specialized highlighting can be done from elsewhere,
    i.e from ~filtered-candidate-transformer~ or ~filter-one-by-one~ slots.
    So use this to either disable completely highlighting in your source,
    or to disable highlighting and use a specialized highlighting matches
    function for this source.
    Remember that this function should run AFTER all filter functions if those
    filter functions are modifying face properties, though it is possible to
    avoid this by using new ~add-face-text-property~ in your filter functions.

** persistent-action
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-grep-persistent-action

- :documentation

    Can be a either a Function called with one parameter (the
    selected candidate) or a cons cell where first element is this
    same function and second element a symbol (e.g never-split)
    that inform ~helm-execute-persistent-action~ to not split his
    window to execute this persistent action.
    Example:

      (defun foo-persistent-action (candidate)
	 (do-something candidate))

      :persistent-action '(foo-persistent-action . never-split) ; Don't split
    or
      :persistent-action 'foo-persistent-action ; Split

    When specifying :persistent-action by slot directly, foo-persistent-action
    will be executed without quitting helm when hitting ~C-j~.

    Note that other persistent actions can be defined using other
    bindings than ~C-j~ by simply defining an interactive function bound
    to a key in the keymap source.
    The function should create a new attribute in source before calling
    ~helm-execute-persistent-action~ on this attribute.
    Example:

       (defun helm-ff-persistent-delete ()
	 "Delete current candidate without quitting."
	 (interactive)
	 (with-helm-alive-p
	   (helm-set-attr 'quick-delete '(helm-ff-quick-delete . never-split))
	   (helm-execute-persistent-action 'quick-delete)))

    This function is then bound in ~helm-find-files-map~.

** requires-pattern
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  2

- :documentation

    If present matches from the source are shown only if the
    pattern is not empty. Optionally, it can have an integer
    parameter specifying the required length of input which is
    useful in case of sources with lots of candidates.

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-source-async))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-imenu-source

#+hcindex: helm-imenu-source

#+hcindex: helm-source-sync

- *parents* ::

  - [[*class: helm-source-sync]]

- *children* ::

This class has following slots

** action
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-imenu-action

- :documentation

    An alist of (DISPLAY . FUNCTION) pairs, a variable name  or a function.
    FUNCTION is called with one parameter: the selected candidate.

    An action other than the default can be chosen from this list
    of actions for the currently selected candidate (by default
    with TAB). The DISPLAY string is shown in the completions
    buffer and the FUNCTION is invoked when an action is
    selected. The first action of the list is the default.

    You should use ~helm-make-actions~ to build this alist easily.

** candidate-transformer
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-imenu-transformer

- :documentation

    It's a function or a list of functions called with one argument
    when the completion list from the source is built. The argument
    is the list of candidates retrieved from the source. The
    function should return a transformed list of candidates which
    will be used for the actual completion.  If it is a list of
    functions, it calls each function sequentially.

    This can be used to transform or remove items from the list of
    candidates.

    Note that ~candidates~ is run already, so the given transformer
    function should also be able to handle candidates with (DISPLAY
    . REAL) format.

** candidates
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-imenu-candidates

- :documentation

    Specifies how to retrieve candidates from the source.
    It can either be a variable name, a function called with no parameters
    or the actual list of candidates.

    Do NOT use this for asynchronous sources, use ~candidates-process~
    instead.

    The list must be a list whose members are strings, symbols
    or (DISPLAY . REAL) pairs.

    In case of (DISPLAY . REAL) pairs, the DISPLAY string is shown
    in the Helm buffer, but the REAL one is used as action
    argument when the candidate is selected. This allows a more
    readable presentation for candidates which would otherwise be,
    for example, too long or have a common part shared with other
    candidates which can be safely replaced with an abbreviated
    string for display purposes.

    Note that if the (DISPLAY . REAL) form is used then pattern
    matching is done on the displayed string, not on the real
    value.

    This function, generally should not compute candidates according to
    ~helm-pattern~ which defeat all the Helm's matching mechanism
    i.e. multiple pattern matching and/or fuzzy matching.
    If you want to do so, use :match-dynamic slot to be sure matching
    occur only in :candidates function and there is no conflict with
    other match functions.

** group
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-imenu

- :documentation

    The current source group, default to ~helm~ when not specified.

** help-message
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-imenu-help-message

- :documentation

    Help message for this source.
    If not present, ~helm-help-message~ value will be used.

** keymap
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  helm-imenu-map

- :documentation

    Specific keymap for this source.
    default value is ~helm-map~.

** nomark
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  t

- :documentation

    Don't allow marking candidates when this attribute is present.

** persistent-action
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-imenu-persistent-action

- :documentation

    Can be a either a Function called with one parameter (the
    selected candidate) or a cons cell where first element is this
    same function and second element a symbol (e.g never-split)
    that inform ~helm-execute-persistent-action~ to not split his
    window to execute this persistent action.
    Example:

      (defun foo-persistent-action (candidate)
	 (do-something candidate))

      :persistent-action '(foo-persistent-action . never-split) ; Don't split
    or
      :persistent-action 'foo-persistent-action ; Split

    When specifying :persistent-action by slot directly, foo-persistent-action
    will be executed without quitting helm when hitting ~C-j~.

    Note that other persistent actions can be defined using other
    bindings than ~C-j~ by simply defining an interactive function bound
    to a key in the keymap source.
    The function should create a new attribute in source before calling
    ~helm-execute-persistent-action~ on this attribute.
    Example:

       (defun helm-ff-persistent-delete ()
	 "Delete current candidate without quitting."
	 (interactive)
	 (with-helm-alive-p
	   (helm-set-attr 'quick-delete '(helm-ff-quick-delete . never-split))
	   (helm-execute-persistent-action 'quick-delete)))

    This function is then bound in ~helm-find-files-map~.

** persistent-help
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  "Show this entry"

- :documentation

    A string to explain persistent-action of this source. It also
    accepts a function or a variable name.
    It will be displayed in ~header-line~ or in ~minibuffer~ depending
    of value of ~helm-echo-input-in-header-line~ and ~helm-display-header-line~.

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-source-sync))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-info-source

#+hcindex: helm-info-source

#+hcindex: helm-source-in-buffer

- *parents* ::

  - [[*class: helm-source-in-buffer]]

- *children* ::

This class has following slots

** init
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  #'helm-info-init

- :documentation

    Function called with no parameters when helm is started.
    It is useful for collecting current state information which can be
    used to create the list of candidates later.
    Initialization of ~candidates-in-buffer~ is done here
    with ~helm-init-candidates-in-buffer~.

** action
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  '(("Goto node" . helm-info-goto))

- :documentation

    An alist of (DISPLAY . FUNCTION) pairs, a variable name  or a function.
    FUNCTION is called with one parameter: the selected candidate.

    An action other than the default can be chosen from this list
    of actions for the currently selected candidate (by default
    with TAB). The DISPLAY string is shown in the completions
    buffer and the FUNCTION is invoked when an action is
    selected. The first action of the list is the default.

    You should use ~helm-make-actions~ to build this alist easily.

** display-to-real
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  #'helm-info-display-to-real

- :documentation

    Transform the selected candidate when passing it to action.

    Function called with one parameter, the selected candidate.

    Avoid recomputing all candidates with candidate-transformer
    or filtered-candidate-transformer to give a new value to REAL,
    instead the selected candidate is transformed only when passing it
    to action.
    Example:

      (helm :sources (helm-build-sync-source "test"
		   :candidates '(a b c d e)
		   :display-to-real (lambda (c) (concat c ":modified by d-t-r")))
	:buffer "*helm test*")

    Note that this is NOT a transformer,
    so the display will not be modified by this function.

** get-line
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  #'buffer-substring

- :documentation

    A function like ~buffer-substring-no-properties~ or ~buffer-substring~.
    This function converts region from point at line-beginning and point
    at line-end in the ~helm-candidate-buffer~ to a string which will be displayed
    in the ~helm-buffer~, it takes two args BEG and END.
    By default, ~helm-candidates-in-buffer~ uses
    ~buffer-substring-no-properties~ which does no conversion and doesn't carry
    text properties.

** info-file
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-source-in-buffer))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-locate-override-inheritor

#+hcindex: helm-locate-override-inheritor

#+hcindex: helm-type-file

#+hcindex: helm-locate-source

- *parents* ::

  - [[*class: helm-type-file]]

- *children* ::

  - [[*class: helm-locate-source]]

This class has following slots

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm-source-get-action-from-type~:

 ((object helm-type-file))

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-type-file))
 :before ((source helm-type-file))
 :after ((source helm-locate-override-inheritor))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-locate-source

#+hcindex: helm-locate-source

#+hcindex: helm-source-async

#+hcindex: helm-locate-override-inheritor

- *parents* ::

  - [[*class: helm-source-async]]

  - [[*class: helm-locate-override-inheritor]]

- *children* ::

This class has following slots

** init
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-locate-initial-setup

- :documentation

    Function called with no parameters when helm is started.
    It is useful for collecting current state information which can be
    used to create the list of candidates later.
    Initialization of ~candidates-in-buffer~ is done here
    with ~helm-init-candidates-in-buffer~.

** candidate-number-limit
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  9999

- :documentation

    Override ~helm-candidate-number-limit~ only for this source.

** candidates-process
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-locate-init

- :documentation

    This attribute is used to define a process as candidate.
    The function called with no arguments must return a process
    i.e. ~processp~, it use typically ~start-process~ or ~make-process~,
    see (info "(elisp) Asynchronous Processes").

    NOTE:
    When building the source at runtime you can give directly a process
    as value, otherwise wrap the process call into a function.
    The process buffer should be nil, otherwise, if you use
    ~helm-buffer~ give to the process a sentinel.

** group
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-locate

- :documentation

    The current source group, default to ~helm~ when not specified.

** history
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-file-name-history

- :documentation

    Allow passing history variable to helm from source.
    It should be a quoted symbol.
    Passing the history variable here have no effect
    so add it also in the ~helm~ call with the :history keyword.
    The main point of adding the variable here
    is to make it available when resuming.

** multimatch
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

    Use the multi-match algorithm when non-nil.
    I.e Allow specifying multiple patterns separated by spaces.
    When a pattern is prefixed by "!" the negation of this pattern is used,
    i.e match anything but this pattern.
    It is the standard way of matching in helm and is enabled by default.
    It can be used with fuzzy-matching enabled, but as soon helm detect a space,
    each pattern will match by regexp and will not be fuzzy.

** persistent-action
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-ff-kill-or-find-buffer-fname

- :documentation

    Can be a either a Function called with one parameter (the
    selected candidate) or a cons cell where first element is this
    same function and second element a symbol (e.g never-split)
    that inform ~helm-execute-persistent-action~ to not split his
    window to execute this persistent action.
    Example:

      (defun foo-persistent-action (candidate)
	 (do-something candidate))

      :persistent-action '(foo-persistent-action . never-split) ; Don't split
    or
      :persistent-action 'foo-persistent-action ; Split

    When specifying :persistent-action by slot directly, foo-persistent-action
    will be executed without quitting helm when hitting ~C-j~.

    Note that other persistent actions can be defined using other
    bindings than ~C-j~ by simply defining an interactive function bound
    to a key in the keymap source.
    The function should create a new attribute in source before calling
    ~helm-execute-persistent-action~ on this attribute.
    Example:

       (defun helm-ff-persistent-delete ()
	 "Delete current candidate without quitting."
	 (interactive)
	 (with-helm-alive-p
	   (helm-set-attr 'quick-delete '(helm-ff-quick-delete . never-split))
	   (helm-execute-persistent-action 'quick-delete)))

    This function is then bound in ~helm-find-files-map~.

** redisplay
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  (progn helm-locate-fuzzy-sort-fn)

- :documentation

    A function or a list of functions to apply to current list
    of candidates when redisplaying buffer with ~helm-redisplay-buffer~.
    This is only interesting for modifying and redisplaying the whole list
    of candidates in async sources.
    It uses ~identity~ by default for when async sources are mixed with
    normal sources, in this case these normal sources are not modified and
    redisplayed as they are.

** requires-pattern
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  3

- :documentation

    If present matches from the source are shown only if the
    pattern is not empty. Optionally, it can have an integer
    parameter specifying the required length of input which is
    useful in case of sources with lots of candidates.

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm-source-get-action-from-type~:

 ((object helm-type-file))

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-source-async))
 ((source helm-type-file))
 :before ((source helm-type-file))
 :after ((source helm-locate-override-inheritor))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-locate-subdirs-source

#+hcindex: helm-locate-subdirs-source

#+hcindex: helm-source-in-buffer

- *parents* ::

  - [[*class: helm-source-in-buffer]]

- *children* ::

This class has following slots

** basedir
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

** data
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  #'helm-locate-init-subdirs

- :documentation

    A string, a list or a buffer that will be used to feed the ~helm-candidates-buffer~.
    This data will be passed in a function added to the init slot and
    the buffer will be build with ~helm-init-candidates-in-buffer~ or directly
    with ~helm-candidates-buffer~ if data is a buffer.
    This is an easy and fast method to build a ~candidates-in-buffer~ source.

** group
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-locate

- :documentation

    The current source group, default to ~helm~ when not specified.

** subdir
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-source-in-buffer))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-moccur-class

#+hcindex: helm-moccur-class

#+hcindex: helm-source-in-buffer

- *parents* ::

  - [[*class: helm-source-in-buffer]]

- *children* ::

This class has following slots

** buffer-name
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

** moccur-buffers
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  nil

- :documentation

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-source-in-buffer))

~helm-setup-user-source~:

 ((source helm-source))

* class: helm-semantic-source

#+hcindex: helm-semantic-source

#+hcindex: helm-source-in-buffer

- *parents* ::

  - [[*class: helm-source-in-buffer]]

- *children* ::

This class has following slots

** init
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  (lambda nil (helm-semantic--maybe-set-needs-update) (setq helm-semantic--tags-cache (semantic-fetch-tags)) (with-current-buffer (helm-candidate-buffer 'global) (let ((major-mode (with-helm-current-buffer major-mode))) (helm-semantic--fetch-candidates helm-semantic--tags-cache 0))))

- :documentation

    Function called with no parameters when helm is started.
    It is useful for collecting current state information which can be
    used to create the list of candidates later.
    Initialization of ~candidates-in-buffer~ is done here
    with ~helm-init-candidates-in-buffer~.

** action
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-semantic-default-action

- :documentation

    An alist of (DISPLAY . FUNCTION) pairs, a variable name  or a function.
    FUNCTION is called with one parameter: the selected candidate.

    An action other than the default can be chosen from this list
    of actions for the currently selected candidate (by default
    with TAB). The DISPLAY string is shown in the completions
    buffer and the FUNCTION is invoked when an action is
    selected. The first action of the list is the default.

    You should use ~helm-make-actions~ to build this alist easily.

** get-line
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'buffer-substring

- :documentation

    A function like ~buffer-substring-no-properties~ or ~buffer-substring~.
    This function converts region from point at line-beginning and point
    at line-end in the ~helm-candidate-buffer~ to a string which will be displayed
    in the ~helm-buffer~, it takes two args BEG and END.
    By default, ~helm-candidates-in-buffer~ uses
    ~buffer-substring-no-properties~ which does no conversion and doesn't carry
    text properties.

** help-message
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-semantic-help-message

- :documentation

    Help message for this source.
    If not present, ~helm-help-message~ value will be used.

** keymap
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  'helm-semantic-map

- :documentation

    Specific keymap for this source.
    default value is ~helm-map~.

** persistent-action
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  (lambda (elm) (helm-semantic-default-action elm t) (helm-highlight-current-line))

- :documentation

    Can be a either a Function called with one parameter (the
    selected candidate) or a cons cell where first element is this
    same function and second element a symbol (e.g never-split)
    that inform ~helm-execute-persistent-action~ to not split his
    window to execute this persistent action.
    Example:

      (defun foo-persistent-action (candidate)
	 (do-something candidate))

      :persistent-action '(foo-persistent-action . never-split) ; Don't split
    or
      :persistent-action 'foo-persistent-action ; Split

    When specifying :persistent-action by slot directly, foo-persistent-action
    will be executed without quitting helm when hitting ~C-j~.

    Note that other persistent actions can be defined using other
    bindings than ~C-j~ by simply defining an interactive function bound
    to a key in the keymap source.
    The function should create a new attribute in source before calling
    ~helm-execute-persistent-action~ on this attribute.
    Example:

       (defun helm-ff-persistent-delete ()
	 "Delete current candidate without quitting."
	 (interactive)
	 (with-helm-alive-p
	   (helm-set-attr 'quick-delete '(helm-ff-quick-delete . never-split))
	   (helm-execute-persistent-action 'quick-delete)))

    This function is then bound in ~helm-find-files-map~.

** persistent-help
:PROPERTIES:
:UNNUMBERED: notoc
:END:

- :type

  t

- :initform

  "Show this entry"

- :documentation

    A string to explain persistent-action of this source. It also
    accepts a function or a variable name.
    It will be displayed in ~header-line~ or in ~minibuffer~ depending
    of value of ~helm-echo-input-in-header-line~ and ~helm-display-header-line~.

** Specialized Methods:
:PROPERTIES:
:UNNUMBERED: notoc
:END:

~helm--setup-source~:

 ((source helm-source))
 :before ((source helm-source))
 ((source helm-source-in-buffer))

~helm-setup-user-source~:

 ((source helm-source))

* Main Index
:PROPERTIES:
:INDEX:    cp
:DESCRIPTION: An index of Helm-Classes's concepts and features.
:END:

* Key Index
:PROPERTIES:
:DESCRIPTION: Key bindings and where they are described.
:INDEX:    ky
:END:

* Command and Function Index
:PROPERTIES:
:DESCRIPTION: Command names and some internal functions.
:INDEX:    fn
:END:

* Variable Index
:PROPERTIES:
:DESCRIPTION: Variables mentioned in the manual.
:INDEX:    vr
:END:

This is not a complete index of variables and faces, only the ones
that are mentioned in the manual.  For a more complete list, use
{{{kbd(M-x org-customize)}}} and then click yourself through the tree.

* Export Setup                                                          :noexport:

#+setupfile: doc-setup.org
#+options: H:4

#+export_file_name: helm-classes.texi

#+texinfo_dir_category: Emacs Add-ons
#+texinfo_dir_title: Helm Classes: (helm-classes)
#+texinfo_dir_desc: Helm Classes

* Footnotes

#+STARTUP: showeverything
#+STARTUP: inlineimages
#+EXCLUDE_TAGS: TOC_4

# (info (org-texinfo-export-to-info))

* Class Index
:PROPERTIES:
:DESCRIPTION: Index of Helm Classes
:INDEX: hc
:END:

#+texinfo: @printindex hc
